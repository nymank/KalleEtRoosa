function cov_1wjm62byrg(){var path="C:\\git\\KalleEtRoosa\\src\\filter.js";var hash="d582691707a6da1c0bad086d403f0b0e05930ea0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\filter.js",statementMap:{"0":{start:{line:25,column:14},end:{line:25,column:16}},"1":{start:{line:26,column:17},end:{line:26,column:18}},"2":{start:{line:27,column:17},end:{line:27,column:49}},"3":{start:{line:28,column:17},end:{line:28,column:21}},"4":{start:{line:30,column:2},end:{line:35,column:3}},"5":{start:{line:31,column:18},end:{line:31,column:30}},"6":{start:{line:32,column:4},end:{line:34,column:5}},"7":{start:{line:33,column:6},end:{line:33,column:32}},"8":{start:{line:36,column:2},end:{line:36,column:15}}},fnMap:{"0":{name:"filter",decl:{start:{line:24,column:9},end:{line:24,column:15}},loc:{start:{line:24,column:34},end:{line:37,column:1}},line:24}},branchMap:{"0":{loc:{start:{line:27,column:17},end:{line:27,column:49}},type:"cond-expr",locations:[{start:{line:27,column:33},end:{line:27,column:34}},{start:{line:27,column:37},end:{line:27,column:49}}],line:27},"1":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:32,column:4},end:{line:34,column:5}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d582691707a6da1c0bad086d403f0b0e05930ea0"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1wjm62byrg=function(){return actualCoverage;};}return actualCoverage;}cov_1wjm62byrg();/**
 * Iterates over elements of `array`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index, array).
 *
 * **Note:** Unlike `remove`, this method returns a new array.
 *
 * @since 5.0.0
 * @category Array
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see pull, pullAll, pullAllBy, pullAllWith, pullAt, remove, reject
 * @example
 *
 * const users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ]
 *
 * filter(users, ({ active }) => active)
 * // => objects for ['barney']
 */function filter(array,predicate){cov_1wjm62byrg().f[0]++;let index=(cov_1wjm62byrg().s[0]++,-1);let resIndex=(cov_1wjm62byrg().s[1]++,0);const length=(cov_1wjm62byrg().s[2]++,array==null?(cov_1wjm62byrg().b[0][0]++,0):(cov_1wjm62byrg().b[0][1]++,array.length));const result=(cov_1wjm62byrg().s[3]++,[[]]);cov_1wjm62byrg().s[4]++;while(++index<length){const value=(cov_1wjm62byrg().s[5]++,array[index]);cov_1wjm62byrg().s[6]++;if(predicate(value,index,array)){cov_1wjm62byrg().b[1][0]++;cov_1wjm62byrg().s[7]++;result[resIndex++]=value;}else{cov_1wjm62byrg().b[1][1]++;}}cov_1wjm62byrg().s[8]++;return result;}export default filter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmaWx0ZXIiLCJhcnJheSIsInByZWRpY2F0ZSIsImluZGV4IiwicmVzSW5kZXgiLCJsZW5ndGgiLCJyZXN1bHQiLCJ2YWx1ZSJdLCJzb3VyY2VzIjpbImZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgYXJyYXlgLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXHJcbiAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcclxuICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXHJcbiAqXHJcbiAqICoqTm90ZToqKiBVbmxpa2UgYHJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXHJcbiAqXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKiBAY2F0ZWdvcnkgQXJyYXlcclxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxyXG4gKiBAc2VlIHB1bGwsIHB1bGxBbGwsIHB1bGxBbGxCeSwgcHVsbEFsbFdpdGgsIHB1bGxBdCwgcmVtb3ZlLCByZWplY3RcclxuICogQGV4YW1wbGVcclxuICpcclxuICogY29uc3QgdXNlcnMgPSBbXHJcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxyXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cclxuICogXVxyXG4gKlxyXG4gKiBmaWx0ZXIodXNlcnMsICh7IGFjdGl2ZSB9KSA9PiBhY3RpdmUpXHJcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cclxuICovXHJcbmZ1bmN0aW9uIGZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XHJcbiAgbGV0IGluZGV4ID0gLTFcclxuICBsZXQgcmVzSW5kZXggPSAwXHJcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGhcclxuICBjb25zdCByZXN1bHQgPSBbW11dXHJcblxyXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGFycmF5W2luZGV4XVxyXG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xyXG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZpbHRlclxyXG4iXSwibWFwcGluZ3MiOiIwb0RBZVk7QUFBQSwyRkFmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0EsT0FBTSxDQUFDQyxLQUFLLENBQUVDLFNBQVMsQ0FBRSx5QkFDaEMsR0FBSUMsTUFBSywwQkFBRyxDQUFDLENBQUMsRUFDZCxHQUFJQyxTQUFRLDBCQUFHLENBQUMsRUFDaEIsS0FBTUMsT0FBTSwwQkFBR0osS0FBSyxFQUFJLElBQUksNkJBQUcsQ0FBQyw4QkFBR0EsS0FBSyxDQUFDSSxNQUFNLEdBQy9DLEtBQU1DLE9BQU0sMEJBQUcsQ0FBQyxFQUFFLENBQUMsMEJBRW5CLE1BQU8sRUFBRUgsS0FBSyxDQUFHRSxNQUFNLENBQUUsQ0FDdkIsS0FBTUUsTUFBSywwQkFBR04sS0FBSyxDQUFDRSxLQUFLLENBQUMsMEJBQzFCLEdBQUlELFNBQVMsQ0FBQ0ssS0FBSyxDQUFFSixLQUFLLENBQUVGLEtBQUssQ0FBQyxDQUFFLG9EQUNsQ0ssTUFBTSxDQUFDRixRQUFRLEVBQUUsQ0FBQyxDQUFHRyxLQUFLLENBQzVCLENBQUMsaUNBQ0gsQ0FBQyx3QkFDRCxNQUFPRCxPQUFNLENBQ2YsQ0FFQSxjQUFlTixPQUFNIn0=