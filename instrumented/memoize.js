function cov_27wais48nx(){var path="C:\\git\\KalleEtRoosa\\src\\memoize.js";var hash="953960946e6e4bac46ea80c470fd58110be89e23";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\memoize.js",statementMap:{"0":{start:{line:44,column:2},end:{line:46,column:3}},"1":{start:{line:45,column:4},end:{line:45,column:46}},"2":{start:{line:47,column:19},end:{line:57,column:3}},"3":{start:{line:48,column:16},end:{line:48,column:63}},"4":{start:{line:49,column:18},end:{line:49,column:32}},"5":{start:{line:51,column:4},end:{line:53,column:5}},"6":{start:{line:52,column:6},end:{line:52,column:27}},"7":{start:{line:54,column:19},end:{line:54,column:41}},"8":{start:{line:55,column:4},end:{line:55,column:52}},"9":{start:{line:56,column:4},end:{line:56,column:17}},"10":{start:{line:58,column:2},end:{line:58,column:45}},"11":{start:{line:59,column:2},end:{line:59,column:17}},"12":{start:{line:62,column:0},end:{line:62,column:19}}},fnMap:{"0":{name:"memoize",decl:{start:{line:43,column:9},end:{line:43,column:16}},loc:{start:{line:43,column:33},end:{line:60,column:1}},line:43},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:19},end:{line:47,column:20}},loc:{start:{line:47,column:37},end:{line:57,column:3}},line:47}},branchMap:{"0":{loc:{start:{line:44,column:2},end:{line:46,column:3}},type:"if",locations:[{start:{line:44,column:2},end:{line:46,column:3}},{start:{line:44,column:2},end:{line:46,column:3}}],line:44},"1":{loc:{start:{line:44,column:6},end:{line:44,column:88}},type:"binary-expr",locations:[{start:{line:44,column:6},end:{line:44,column:32}},{start:{line:44,column:37},end:{line:44,column:53}},{start:{line:44,column:57},end:{line:44,column:87}}],line:44},"2":{loc:{start:{line:48,column:16},end:{line:48,column:63}},type:"cond-expr",locations:[{start:{line:48,column:27},end:{line:48,column:53}},{start:{line:48,column:56},end:{line:48,column:63}}],line:48},"3":{loc:{start:{line:51,column:4},end:{line:53,column:5}},type:"if",locations:[{start:{line:51,column:4},end:{line:53,column:5}},{start:{line:51,column:4},end:{line:53,column:5}}],line:51},"4":{loc:{start:{line:55,column:21},end:{line:55,column:52}},type:"binary-expr",locations:[{start:{line:55,column:21},end:{line:55,column:43}},{start:{line:55,column:47},end:{line:55,column:52}}],line:55},"5":{loc:{start:{line:58,column:24},end:{line:58,column:44}},type:"binary-expr",locations:[{start:{line:58,column:24},end:{line:58,column:37}},{start:{line:58,column:41},end:{line:58,column:44}}],line:58}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"953960946e6e4bac46ea80c470fd58110be89e23"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_27wais48nx=function(){return actualCoverage;};}return actualCoverage;}cov_27wais48nx();/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * const object = { 'a': 1, 'b': 2 }
 * const other = { 'c': 3, 'd': 4 }
 *
 * const values = memoize(values)
 * values(object)
 * // => [1, 2]
 *
 * values(other)
 * // => [3, 4]
 *
 * object.a = 2
 * values(object)
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b'])
 * values(object)
 * // => ['a', 'b']
 *
 * // Replace `memoize.Cache`.
 * memoize.Cache = WeakMap
 */function memoize(func,resolver){cov_27wais48nx().f[0]++;cov_27wais48nx().s[0]++;if((cov_27wais48nx().b[1][0]++,typeof func!=='function')||(cov_27wais48nx().b[1][1]++,resolver!=null)&&(cov_27wais48nx().b[1][2]++,typeof resolver!=='function')){cov_27wais48nx().b[0][0]++;cov_27wais48nx().s[1]++;throw new TypeError('Expected a function');}else{cov_27wais48nx().b[0][1]++;}cov_27wais48nx().s[2]++;const memoized=function(...args){cov_27wais48nx().f[1]++;const key=(cov_27wais48nx().s[3]++,resolver?(cov_27wais48nx().b[2][0]++,resolver.apply(this,args)):(cov_27wais48nx().b[2][1]++,args[0]));const cache=(cov_27wais48nx().s[4]++,memoized.cache);cov_27wais48nx().s[5]++;if(cache.has(key)){cov_27wais48nx().b[3][0]++;cov_27wais48nx().s[6]++;return cache.get(key);}else{cov_27wais48nx().b[3][1]++;}const result=(cov_27wais48nx().s[7]++,func.apply(this,args));cov_27wais48nx().s[8]++;memoized.cache=(cov_27wais48nx().b[4][0]++,cache.set(key,result))||(cov_27wais48nx().b[4][1]++,cache);cov_27wais48nx().s[9]++;return result;};cov_27wais48nx().s[10]++;memoized.cache=new((cov_27wais48nx().b[5][0]++,memoize.Cache)||(cov_27wais48nx().b[5][1]++,Map))();cov_27wais48nx().s[11]++;return memoized;}cov_27wais48nx().s[12]++;memoize.Cache=Map;export default memoize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZW1vaXplIiwiZnVuYyIsInJlc29sdmVyIiwiVHlwZUVycm9yIiwibWVtb2l6ZWQiLCJhcmdzIiwia2V5IiwiYXBwbHkiLCJjYWNoZSIsImhhcyIsImdldCIsInJlc3VsdCIsInNldCIsIkNhY2hlIiwiTWFwIl0sInNvdXJjZXMiOlsibWVtb2l6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcclxuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxyXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcclxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcclxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXHJcbiAqXHJcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcclxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBtZW1vaXplLkNhY2hlYFxyXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxyXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxyXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cclxuICpcclxuICogQHNpbmNlIDAuMS4wXHJcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGNvbnN0IG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfVxyXG4gKiBjb25zdCBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfVxyXG4gKlxyXG4gKiBjb25zdCB2YWx1ZXMgPSBtZW1vaXplKHZhbHVlcylcclxuICogdmFsdWVzKG9iamVjdClcclxuICogLy8gPT4gWzEsIDJdXHJcbiAqXHJcbiAqIHZhbHVlcyhvdGhlcilcclxuICogLy8gPT4gWzMsIDRdXHJcbiAqXHJcbiAqIG9iamVjdC5hID0gMlxyXG4gKiB2YWx1ZXMob2JqZWN0KVxyXG4gKiAvLyA9PiBbMSwgMl1cclxuICpcclxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXHJcbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKVxyXG4gKiB2YWx1ZXMob2JqZWN0KVxyXG4gKiAvLyA9PiBbJ2EnLCAnYiddXHJcbiAqXHJcbiAqIC8vIFJlcGxhY2UgYG1lbW9pemUuQ2FjaGVgLlxyXG4gKiBtZW1vaXplLkNhY2hlID0gV2Vha01hcFxyXG4gKi9cclxuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xyXG4gIGlmICh0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIGZ1bmN0aW9uJylcclxuICB9XHJcbiAgY29uc3QgbWVtb2l6ZWQgPSBmdW5jdGlvbiguLi5hcmdzKSB7XHJcbiAgICBjb25zdCBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXVxyXG4gICAgY29uc3QgY2FjaGUgPSBtZW1vaXplZC5jYWNoZVxyXG5cclxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xyXG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSlcclxuICAgIH1cclxuICAgIGNvbnN0IHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncylcclxuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZVxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXApXHJcbiAgcmV0dXJuIG1lbW9pemVkXHJcbn1cclxuXHJcbm1lbW9pemUuQ2FjaGUgPSBNYXBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVcclxuIl0sIm1hcHBpbmdzIjoiKzVGQWVZO0FBQUEsMkZBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0EsUUFBTyxDQUFDQyxJQUFJLENBQUVDLFFBQVEsQ0FBRSxpREFDL0IsR0FBSSxrQ0FBT0QsS0FBSSxHQUFLLFVBQVUsR0FBSyw0QkFBQUMsUUFBUSxFQUFJLElBQUksK0JBQUksTUFBT0EsU0FBUSxHQUFLLFVBQVUsQ0FBQyxDQUFFLG9EQUN0RixLQUFNLElBQUlDLFVBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUM1QyxDQUFDLHlEQUNELEtBQU1DLFNBQVEsQ0FBRyxTQUFTLEdBQUdDLElBQUksQ0FBRSx5QkFDakMsS0FBTUMsSUFBRywwQkFBR0osUUFBUSw2QkFBR0EsUUFBUSxDQUFDSyxLQUFLLENBQUMsSUFBSSxDQUFFRixJQUFJLENBQUMsOEJBQUdBLElBQUksQ0FBQyxDQUFDLENBQUMsR0FDM0QsS0FBTUcsTUFBSywwQkFBR0osUUFBUSxDQUFDSSxLQUFLLDBCQUU1QixHQUFJQSxLQUFLLENBQUNDLEdBQUcsQ0FBQ0gsR0FBRyxDQUFDLENBQUUsb0RBQ2xCLE1BQU9FLE1BQUssQ0FBQ0UsR0FBRyxDQUFDSixHQUFHLENBQUMsQ0FDdkIsQ0FBQyxpQ0FDRCxLQUFNSyxPQUFNLDBCQUFHVixJQUFJLENBQUNNLEtBQUssQ0FBQyxJQUFJLENBQUVGLElBQUksQ0FBQywwQkFDckNELFFBQVEsQ0FBQ0ksS0FBSyxDQUFHLDRCQUFBQSxLQUFLLENBQUNJLEdBQUcsQ0FBQ04sR0FBRyxDQUFFSyxNQUFNLENBQUMsK0JBQUlILEtBQUssMEJBQ2hELE1BQU9HLE9BQU0sQ0FDZixDQUFDLDBCQUNEUCxRQUFRLENBQUNJLEtBQUssQ0FBRyxJQUFLLDRCQUFBUixPQUFPLENBQUNhLEtBQUssK0JBQUlDLEdBQUcsSUFBQywwQkFDM0MsTUFBT1YsU0FBUSxDQUNqQixDQUFDLHlCQUVESixPQUFPLENBQUNhLEtBQUssQ0FBR0MsR0FBRyxDQUVuQixjQUFlZCxRQUFPIn0=