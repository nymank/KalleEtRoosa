function cov_7vlbgnh04(){var path="C:\\git\\KalleEtRoosa\\src\\slice.js";var hash="bec16c4ca0678180fc6fb3c4c16875841df4af95";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\slice.js",statementMap:{"0":{start:{line:22,column:15},end:{line:22,column:47}},"1":{start:{line:23,column:2},end:{line:25,column:3}},"2":{start:{line:24,column:4},end:{line:24,column:13}},"3":{start:{line:26,column:2},end:{line:26,column:35}},"4":{start:{line:27,column:2},end:{line:27,column:40}},"5":{start:{line:29,column:2},end:{line:31,column:3}},"6":{start:{line:30,column:4},end:{line:30,column:50}},"7":{start:{line:32,column:2},end:{line:34,column:3}},"8":{start:{line:33,column:4},end:{line:33,column:17}},"9":{start:{line:35,column:2},end:{line:35,column:50}},"10":{start:{line:36,column:2},end:{line:36,column:14}},"11":{start:{line:38,column:14},end:{line:38,column:16}},"12":{start:{line:39,column:17},end:{line:39,column:34}},"13":{start:{line:40,column:2},end:{line:42,column:3}},"14":{start:{line:41,column:4},end:{line:41,column:40}},"15":{start:{line:43,column:2},end:{line:43,column:15}}},fnMap:{"0":{name:"slice",decl:{start:{line:21,column:9},end:{line:21,column:14}},loc:{start:{line:21,column:34},end:{line:44,column:1}},line:21}},branchMap:{"0":{loc:{start:{line:22,column:15},end:{line:22,column:47}},type:"cond-expr",locations:[{start:{line:22,column:31},end:{line:22,column:32}},{start:{line:22,column:35},end:{line:22,column:47}}],line:22},"1":{loc:{start:{line:23,column:2},end:{line:25,column:3}},type:"if",locations:[{start:{line:23,column:2},end:{line:25,column:3}},{start:{line:23,column:2},end:{line:25,column:3}}],line:23},"2":{loc:{start:{line:26,column:10},end:{line:26,column:35}},type:"cond-expr",locations:[{start:{line:26,column:26},end:{line:26,column:27}},{start:{line:26,column:30},end:{line:26,column:35}}],line:26},"3":{loc:{start:{line:27,column:8},end:{line:27,column:40}},type:"cond-expr",locations:[{start:{line:27,column:28},end:{line:27,column:34}},{start:{line:27,column:37},end:{line:27,column:40}}],line:27},"4":{loc:{start:{line:29,column:2},end:{line:31,column:3}},type:"if",locations:[{start:{line:29,column:2},end:{line:31,column:3}},{start:{line:29,column:2},end:{line:31,column:3}}],line:29},"5":{loc:{start:{line:30,column:12},end:{line:30,column:50}},type:"cond-expr",locations:[{start:{line:30,column:30},end:{line:30,column:31}},{start:{line:30,column:35},end:{line:30,column:49}}],line:30},"6":{loc:{start:{line:32,column:2},end:{line:34,column:3}},type:"if",locations:[{start:{line:32,column:2},end:{line:34,column:3}},{start:{line:32,column:2},end:{line:34,column:3}}],line:32},"7":{loc:{start:{line:35,column:11},end:{line:35,column:50}},type:"cond-expr",locations:[{start:{line:35,column:25},end:{line:35,column:26}},{start:{line:35,column:30},end:{line:35,column:49}}],line:35}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"bec16c4ca0678180fc6fb3c4c16875841df4af95"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_7vlbgnh04=function(){return actualCoverage;};}return actualCoverage;}cov_7vlbgnh04();/**
 * Creates a slice of `array` from `start` up to, but not including, `end`.
 *
 * **Note:** This method is used instead of
 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
 * returned.
 *
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position. A negative index will be treated as an offset from the end.
 * @param {number} [end=array.length] The end position. A negative index will be treated as an offset from the end.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var array = [1, 2, 3, 4]
 *
 * _.slice(array, 2)
 * // => [3, 4]
 */function slice(array,start,end){cov_7vlbgnh04().f[0]++;let length=(cov_7vlbgnh04().s[0]++,array==null?(cov_7vlbgnh04().b[0][0]++,0):(cov_7vlbgnh04().b[0][1]++,array.length));cov_7vlbgnh04().s[1]++;if(!length){cov_7vlbgnh04().b[1][0]++;cov_7vlbgnh04().s[2]++;return[];}else{cov_7vlbgnh04().b[1][1]++;}cov_7vlbgnh04().s[3]++;start=start==null?(cov_7vlbgnh04().b[2][0]++,0):(cov_7vlbgnh04().b[2][1]++,start);cov_7vlbgnh04().s[4]++;end=end===undefined?(cov_7vlbgnh04().b[3][0]++,length):(cov_7vlbgnh04().b[3][1]++,end);cov_7vlbgnh04().s[5]++;if(start<0){cov_7vlbgnh04().b[4][0]++;cov_7vlbgnh04().s[6]++;start=-start>length?(cov_7vlbgnh04().b[5][0]++,0):(cov_7vlbgnh04().b[5][1]++,length+start);}else{cov_7vlbgnh04().b[4][1]++;}cov_7vlbgnh04().s[7]++;if(end<0){cov_7vlbgnh04().b[6][0]++;cov_7vlbgnh04().s[8]++;end+=length;}else{cov_7vlbgnh04().b[6][1]++;}cov_7vlbgnh04().s[9]++;length=start>end?(cov_7vlbgnh04().b[7][0]++,0):(cov_7vlbgnh04().b[7][1]++,end-start>>>0);cov_7vlbgnh04().s[10]++;start>>>=0;let index=(cov_7vlbgnh04().s[11]++,-1);const result=(cov_7vlbgnh04().s[12]++,new Array(length));cov_7vlbgnh04().s[13]++;while(++index<length){cov_7vlbgnh04().s[14]++;result[index]=array[index+start];}cov_7vlbgnh04().s[15]++;return result;}export default slice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzbGljZSIsImFycmF5Iiwic3RhcnQiLCJlbmQiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJpbmRleCIsInJlc3VsdCIsIkFycmF5Il0sInNvdXJjZXMiOlsic2xpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxyXG4gKlxyXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXHJcbiAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcclxuICogcmV0dXJuZWQuXHJcbiAqXHJcbiAqIEBzaW5jZSAzLjAuMFxyXG4gKiBAY2F0ZWdvcnkgQXJyYXlcclxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi4gQSBuZWdhdGl2ZSBpbmRleCB3aWxsIGJlIHRyZWF0ZWQgYXMgYW4gb2Zmc2V0IGZyb20gdGhlIGVuZC5cclxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLiBBIG5lZ2F0aXZlIGluZGV4IHdpbGwgYmUgdHJlYXRlZCBhcyBhbiBvZmZzZXQgZnJvbSB0aGUgZW5kLlxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XVxyXG4gKlxyXG4gKiBfLnNsaWNlKGFycmF5LCAyKVxyXG4gKiAvLyA9PiBbMywgNF1cclxuICovXHJcbmZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XHJcbiAgbGV0IGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoXHJcbiAgaWYgKCFsZW5ndGgpIHtcclxuICAgIHJldHVybiBbXVxyXG4gIH1cclxuICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogc3RhcnRcclxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZFxyXG5cclxuICBpZiAoc3RhcnQgPCAwKSB7XHJcbiAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpXHJcbiAgfVxyXG4gIGlmIChlbmQgPCAwKSB7XHJcbiAgICBlbmQgKz0gbGVuZ3RoXHJcbiAgfVxyXG4gIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKVxyXG4gIHN0YXJ0ID4+Pj0gMFxyXG5cclxuICBsZXQgaW5kZXggPSAtMVxyXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpXHJcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcclxuICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XVxyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNsaWNlXHJcbiJdLCJtYXBwaW5ncyI6IjR4R0FlWTtBQUFBLHlGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQSxNQUFLLENBQUNDLEtBQUssQ0FBRUMsS0FBSyxDQUFFQyxHQUFHLENBQUUsd0JBQ2hDLEdBQUlDLE9BQU0seUJBQUdILEtBQUssRUFBSSxJQUFJLDRCQUFHLENBQUMsNkJBQUdBLEtBQUssQ0FBQ0csTUFBTSwwQkFDN0MsR0FBSSxDQUFDQSxNQUFNLENBQUUsa0RBQ1gsTUFBTyxFQUFFLENBQ1gsQ0FBQyx1REFDREYsS0FBSyxDQUFHQSxLQUFLLEVBQUksSUFBSSw0QkFBRyxDQUFDLDZCQUFHQSxLQUFLLHlCQUNqQ0MsR0FBRyxDQUFHQSxHQUFHLEdBQUtFLFNBQVMsNEJBQUdELE1BQU0sNkJBQUdELEdBQUcseUJBRXRDLEdBQUlELEtBQUssQ0FBRyxDQUFDLENBQUUsa0RBQ2JBLEtBQUssQ0FBRyxDQUFDQSxLQUFLLENBQUdFLE1BQU0sNEJBQUcsQ0FBQyw2QkFBSUEsTUFBTSxDQUFHRixLQUFLLENBQUMsQ0FDaEQsQ0FBQyx1REFDRCxHQUFJQyxHQUFHLENBQUcsQ0FBQyxDQUFFLGtEQUNYQSxHQUFHLEVBQUlDLE1BQU0sQ0FDZixDQUFDLHVEQUNEQSxNQUFNLENBQUdGLEtBQUssQ0FBR0MsR0FBRyw0QkFBRyxDQUFDLDZCQUFLQSxHQUFHLENBQUdELEtBQUssR0FBTSxDQUFDLENBQUMseUJBQ2hEQSxLQUFLLElBQU0sQ0FBQyxDQUVaLEdBQUlJLE1BQUssMEJBQUcsQ0FBQyxDQUFDLEVBQ2QsS0FBTUMsT0FBTSwwQkFBRyxHQUFJQyxNQUFLLENBQUNKLE1BQU0sQ0FBQywwQkFDaEMsTUFBTyxFQUFFRSxLQUFLLENBQUdGLE1BQU0sQ0FBRSx5QkFDdkJHLE1BQU0sQ0FBQ0QsS0FBSyxDQUFDLENBQUdMLEtBQUssQ0FBQ0ssS0FBSyxDQUFHSixLQUFLLENBQUMsQ0FDdEMsQ0FBQyx3QkFDRCxNQUFPSyxPQUFNLENBQ2YsQ0FFQSxjQUFlUCxNQUFLIn0=