function cov_2mfne95l3x(){var path="C:\\git\\KalleEtRoosa\\src\\every.js";var hash="53501085512f0674c882b1a5f81d2f0aca4055fd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\every.js",statementMap:{"0":{start:{line:23,column:14},end:{line:23,column:16}},"1":{start:{line:24,column:17},end:{line:24,column:49}},"2":{start:{line:26,column:2},end:{line:30,column:3}},"3":{start:{line:27,column:4},end:{line:29,column:5}},"4":{start:{line:28,column:6},end:{line:28,column:18}},"5":{start:{line:31,column:2},end:{line:31,column:13}}},fnMap:{"0":{name:"every",decl:{start:{line:22,column:9},end:{line:22,column:14}},loc:{start:{line:22,column:33},end:{line:32,column:1}},line:22}},branchMap:{"0":{loc:{start:{line:24,column:17},end:{line:24,column:49}},type:"cond-expr",locations:[{start:{line:24,column:33},end:{line:24,column:34}},{start:{line:24,column:37},end:{line:24,column:49}}],line:24},"1":{loc:{start:{line:27,column:4},end:{line:29,column:5}},type:"if",locations:[{start:{line:27,column:4},end:{line:29,column:5}},{start:{line:27,column:4},end:{line:29,column:5}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"53501085512f0674c882b1a5f81d2f0aca4055fd"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2mfne95l3x=function(){return actualCoverage;};}return actualCoverage;}cov_2mfne95l3x();/**
 * Checks if `predicate` returns truthy for **all** elements of `array`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index, array).
 *
 * **Note:** This method returns `true` for
 * [empty arrays](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty arrays.
 *
 * @since 5.0.0
 * @category Array
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * every([true, 1, null, 'yes'], Boolean)
 * // => false
 */function every(array,predicate){cov_2mfne95l3x().f[0]++;let index=(cov_2mfne95l3x().s[0]++,-1);const length=(cov_2mfne95l3x().s[1]++,array==null?(cov_2mfne95l3x().b[0][0]++,0):(cov_2mfne95l3x().b[0][1]++,array.length));cov_2mfne95l3x().s[2]++;while(++index<length){cov_2mfne95l3x().s[3]++;if(!predicate(array[index],index,array)){cov_2mfne95l3x().b[1][0]++;cov_2mfne95l3x().s[4]++;return false;}else{cov_2mfne95l3x().b[1][1]++;}}cov_2mfne95l3x().s[5]++;return true;}export default every;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJldmVyeSIsImFycmF5IiwicHJlZGljYXRlIiwiaW5kZXgiLCJsZW5ndGgiXSwic291cmNlcyI6WyJldmVyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBhcnJheWAuXHJcbiAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcclxuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxyXG4gKlxyXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXHJcbiAqIFtlbXB0eSBhcnJheXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxyXG4gKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxyXG4gKiBlbGVtZW50cyBvZiBlbXB0eSBhcnJheXMuXHJcbiAqXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKiBAY2F0ZWdvcnkgQXJyYXlcclxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxyXG4gKiAgZWxzZSBgZmFsc2VgLlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKVxyXG4gKiAvLyA9PiBmYWxzZVxyXG4gKi9cclxuZnVuY3Rpb24gZXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xyXG4gIGxldCBpbmRleCA9IC0xXHJcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGhcclxuXHJcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcclxuICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRydWVcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZXZlcnlcclxuIl0sIm1hcHBpbmdzIjoiNjhDQWVZO0FBQUEsMkZBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0EsTUFBSyxDQUFDQyxLQUFLLENBQUVDLFNBQVMsQ0FBRSx5QkFDL0IsR0FBSUMsTUFBSywwQkFBRyxDQUFDLENBQUMsRUFDZCxLQUFNQyxPQUFNLDBCQUFHSCxLQUFLLEVBQUksSUFBSSw2QkFBRyxDQUFDLDhCQUFHQSxLQUFLLENBQUNHLE1BQU0sMkJBRS9DLE1BQU8sRUFBRUQsS0FBSyxDQUFHQyxNQUFNLENBQUUseUJBQ3ZCLEdBQUksQ0FBQ0YsU0FBUyxDQUFDRCxLQUFLLENBQUNFLEtBQUssQ0FBQyxDQUFFQSxLQUFLLENBQUVGLEtBQUssQ0FBQyxDQUFFLG9EQUMxQyxNQUFPLE1BQUssQ0FDZCxDQUFDLGlDQUNILENBQUMsd0JBQ0QsTUFBTyxLQUFJLENBQ2IsQ0FFQSxjQUFlRCxNQUFLIn0=