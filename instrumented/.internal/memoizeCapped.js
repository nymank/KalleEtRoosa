function cov_sinolve3r(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\memoizeCapped.js";var hash="5b1491a6830484029931834717ebc483e608dcb8";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\memoizeCapped.js",statementMap:{"0":{start:{line:4,column:25},end:{line:4,column:28}},"1":{start:{line:15,column:17},end:{line:21,column:4}},"2":{start:{line:16,column:22},end:{line:16,column:28}},"3":{start:{line:17,column:4},end:{line:19,column:5}},"4":{start:{line:18,column:6},end:{line:18,column:19}},"5":{start:{line:20,column:4},end:{line:20,column:14}},"6":{start:{line:23,column:2},end:{line:23,column:15}}},fnMap:{"0":{name:"memoizeCapped",decl:{start:{line:14,column:9},end:{line:14,column:22}},loc:{start:{line:14,column:29},end:{line:24,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:31},end:{line:15,column:32}},loc:{start:{line:15,column:40},end:{line:21,column:3}},line:15}},branchMap:{"0":{loc:{start:{line:17,column:4},end:{line:19,column:5}},type:"if",locations:[{start:{line:17,column:4},end:{line:19,column:5}},{start:{line:17,column:4},end:{line:19,column:5}}],line:17}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5b1491a6830484029931834717ebc483e608dcb8"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_sinolve3r=function(){return actualCoverage;};}return actualCoverage;}cov_sinolve3r();import memoize from'../memoize.js';/** Used as the maximum memoize cache size. */const MAX_MEMOIZE_SIZE=(cov_sinolve3r().s[0]++,500);/**
 * A specialized version of `memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */function memoizeCapped(func){cov_sinolve3r().f[0]++;const result=(cov_sinolve3r().s[1]++,memoize(func,key=>{cov_sinolve3r().f[1]++;const{cache}=(cov_sinolve3r().s[2]++,result);cov_sinolve3r().s[3]++;if(cache.size===MAX_MEMOIZE_SIZE){cov_sinolve3r().b[0][0]++;cov_sinolve3r().s[4]++;cache.clear();}else{cov_sinolve3r().b[0][1]++;}cov_sinolve3r().s[5]++;return key;}));cov_sinolve3r().s[6]++;return result;}export default memoizeCapped;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZW1vaXplIiwiTUFYX01FTU9JWkVfU0laRSIsIm1lbW9pemVDYXBwZWQiLCJmdW5jIiwicmVzdWx0Iiwia2V5IiwiY2FjaGUiLCJzaXplIiwiY2xlYXIiXSwic291cmNlcyI6WyJtZW1vaXplQ2FwcGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZW1vaXplIGZyb20gJy4uL21lbW9pemUuanMnXHJcblxyXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXHJcbmNvbnN0IE1BWF9NRU1PSVpFX1NJWkUgPSA1MDBcclxuXHJcbi8qKlxyXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xyXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XHJcbiAgY29uc3QgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCAoa2V5KSA9PiB7XHJcbiAgICBjb25zdCB7IGNhY2hlIH0gPSByZXN1bHRcclxuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XHJcbiAgICAgIGNhY2hlLmNsZWFyKClcclxuICAgIH1cclxuICAgIHJldHVybiBrZXlcclxuICB9KVxyXG5cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVDYXBwZWRcclxuIl0sIm1hcHBpbmdzIjoiMC9DQWVZO0FBQUEseUZBZlosTUFBT0EsUUFBTyxLQUFNLGVBQWUsQ0FFbkMsOENBQ0EsS0FBTUMsaUJBQWdCLHlCQUFHLEdBQUcsRUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLGNBQWEsQ0FBQ0MsSUFBSSxDQUFFLHdCQUMzQixLQUFNQyxPQUFNLHlCQUFHSixPQUFPLENBQUNHLElBQUksQ0FBR0UsR0FBRyxFQUFLLHdCQUNwQyxLQUFNLENBQUVDLEtBQU0sQ0FBQyx5QkFBR0YsTUFBTSx5QkFDeEIsR0FBSUUsS0FBSyxDQUFDQyxJQUFJLEdBQUtOLGdCQUFnQixDQUFFLGtEQUNuQ0ssS0FBSyxDQUFDRSxLQUFLLEVBQUUsQ0FDZixDQUFDLHVEQUNELE1BQU9ILElBQUcsQ0FDWixDQUFDLENBQUMseUJBRUYsTUFBT0QsT0FBTSxDQUNmLENBRUEsY0FBZUYsY0FBYSJ9