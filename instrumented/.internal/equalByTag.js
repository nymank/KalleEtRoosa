function cov_2jop6bzkoq(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\equalByTag.js";var hash="0aaec9571bf9449454e6094606eb5e638952515c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\equalByTag.js",statementMap:{"0":{start:{line:7,column:29},end:{line:7,column:30}},"1":{start:{line:8,column:31},end:{line:8,column:32}},"2":{start:{line:11,column:16},end:{line:11,column:34}},"3":{start:{line:12,column:16},end:{line:12,column:31}},"4":{start:{line:13,column:17},end:{line:13,column:33}},"5":{start:{line:14,column:15},end:{line:14,column:29}},"6":{start:{line:15,column:18},end:{line:15,column:35}},"7":{start:{line:16,column:18},end:{line:16,column:35}},"8":{start:{line:17,column:15},end:{line:17,column:29}},"9":{start:{line:18,column:18},end:{line:18,column:35}},"10":{start:{line:19,column:18},end:{line:19,column:35}},"11":{start:{line:21,column:23},end:{line:21,column:45}},"12":{start:{line:22,column:20},end:{line:22,column:39}},"13":{start:{line:25,column:22},end:{line:25,column:46}},"14":{start:{line:45,column:2},end:{line:105,column:3}},"15":{start:{line:47,column:6},end:{line:50,column:7}},"16":{start:{line:49,column:8},end:{line:49,column:20}},"17":{start:{line:51,column:6},end:{line:51,column:28}},"18":{start:{line:52,column:6},end:{line:52,column:26}},"19":{start:{line:55,column:6},end:{line:58,column:7}},"20":{start:{line:57,column:8},end:{line:57,column:20}},"21":{start:{line:59,column:6},end:{line:59,column:17}},"22":{start:{line:66,column:6},end:{line:66,column:32}},"23":{start:{line:69,column:6},end:{line:69,column:73}},"24":{start:{line:76,column:6},end:{line:76,column:33}},"25":{start:{line:79,column:20},end:{line:79,column:30}},"26":{start:{line:82,column:24},end:{line:82,column:54}},"27":{start:{line:83,column:6},end:{line:83,column:39}},"28":{start:{line:85,column:6},end:{line:87,column:7}},"29":{start:{line:86,column:8},end:{line:86,column:20}},"30":{start:{line:89,column:22},end:{line:89,column:39}},"31":{start:{line:90,column:6},end:{line:92,column:7}},"32":{start:{line:91,column:8},end:{line:91,column:31}},"33":{start:{line:93,column:6},end:{line:93,column:39}},"34":{start:{line:96,column:6},end:{line:96,column:30}},"35":{start:{line:97,column:21},end:{line:97,column:104}},"36":{start:{line:98,column:6},end:{line:98,column:29}},"37":{start:{line:99,column:6},end:{line:99,column:19}},"38":{start:{line:102,column:6},end:{line:104,column:7}},"39":{start:{line:103,column:8},end:{line:103,column:70}},"40":{start:{line:106,column:2},end:{line:106,column:14}}},fnMap:{"0":{name:"equalByTag",decl:{start:{line:44,column:9},end:{line:44,column:19}},loc:{start:{line:44,column:79},end:{line:107,column:1}},line:44}},branchMap:{"0":{loc:{start:{line:45,column:2},end:{line:105,column:3}},type:"switch",locations:[{start:{line:46,column:4},end:{line:52,column:26}},{start:{line:54,column:4},end:{line:59,column:17}},{start:{line:61,column:4},end:{line:61,column:17}},{start:{line:62,column:4},end:{line:62,column:17}},{start:{line:63,column:4},end:{line:66,column:32}},{start:{line:68,column:4},end:{line:69,column:73}},{start:{line:71,column:4},end:{line:71,column:19}},{start:{line:72,column:4},end:{line:76,column:33}},{start:{line:78,column:4},end:{line:79,column:30}},{start:{line:81,column:4},end:{line:99,column:19}},{start:{line:101,column:4},end:{line:104,column:7}}],line:45},"1":{loc:{start:{line:47,column:6},end:{line:50,column:7}},type:"if",locations:[{start:{line:47,column:6},end:{line:50,column:7}},{start:{line:47,column:6},end:{line:50,column:7}}],line:47},"2":{loc:{start:{line:47,column:10},end:{line:48,column:49}},type:"binary-expr",locations:[{start:{line:47,column:11},end:{line:47,column:48}},{start:{line:48,column:11},end:{line:48,column:48}}],line:47},"3":{loc:{start:{line:55,column:6},end:{line:58,column:7}},type:"if",locations:[{start:{line:55,column:6},end:{line:58,column:7}},{start:{line:55,column:6},end:{line:58,column:7}}],line:55},"4":{loc:{start:{line:55,column:10},end:{line:56,column:67}},type:"binary-expr",locations:[{start:{line:55,column:11},end:{line:55,column:48}},{start:{line:56,column:10},end:{line:56,column:67}}],line:55},"5":{loc:{start:{line:69,column:13},end:{line:69,column:73}},type:"binary-expr",locations:[{start:{line:69,column:13},end:{line:69,column:38}},{start:{line:69,column:42},end:{line:69,column:73}}],line:69},"6":{loc:{start:{line:83,column:6},end:{line:83,column:39}},type:"binary-expr",locations:[{start:{line:83,column:6},end:{line:83,column:13}},{start:{line:83,column:18},end:{line:83,column:38}}],line:83},"7":{loc:{start:{line:85,column:6},end:{line:87,column:7}},type:"if",locations:[{start:{line:85,column:6},end:{line:87,column:7}},{start:{line:85,column:6},end:{line:87,column:7}}],line:85},"8":{loc:{start:{line:85,column:10},end:{line:85,column:49}},type:"binary-expr",locations:[{start:{line:85,column:10},end:{line:85,column:35}},{start:{line:85,column:39},end:{line:85,column:49}}],line:85},"9":{loc:{start:{line:90,column:6},end:{line:92,column:7}},type:"if",locations:[{start:{line:90,column:6},end:{line:92,column:7}},{start:{line:90,column:6},end:{line:92,column:7}}],line:90},"10":{loc:{start:{line:102,column:6},end:{line:104,column:7}},type:"if",locations:[{start:{line:102,column:6},end:{line:104,column:7}},{start:{line:102,column:6},end:{line:104,column:7}}],line:102}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},f:{"0":0},b:{"0":[0,0,0,0,0,0,0,0,0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0aaec9571bf9449454e6094606eb5e638952515c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2jop6bzkoq=function(){return actualCoverage;};}return actualCoverage;}cov_2jop6bzkoq();import eq from'../eq.js';import equalArrays from'./equalArrays.js';import mapToArray from'./mapToArray.js';import setToArray from'./setToArray.js';/** Used to compose bitmasks for value comparisons. */const COMPARE_PARTIAL_FLAG=(cov_2jop6bzkoq().s[0]++,1);const COMPARE_UNORDERED_FLAG=(cov_2jop6bzkoq().s[1]++,2);/** `Object#toString` result references. */const boolTag=(cov_2jop6bzkoq().s[2]++,'[object Boolean]');const dateTag=(cov_2jop6bzkoq().s[3]++,'[object Date]');const errorTag=(cov_2jop6bzkoq().s[4]++,'[object Error]');const mapTag=(cov_2jop6bzkoq().s[5]++,'[object Map]');const numberTag=(cov_2jop6bzkoq().s[6]++,'[object Number]');const regexpTag=(cov_2jop6bzkoq().s[7]++,'[object RegExp]');const setTag=(cov_2jop6bzkoq().s[8]++,'[object Set]');const stringTag=(cov_2jop6bzkoq().s[9]++,'[object String]');const symbolTag=(cov_2jop6bzkoq().s[10]++,'[object Symbol]');const arrayBufferTag=(cov_2jop6bzkoq().s[11]++,'[object ArrayBuffer]');const dataViewTag=(cov_2jop6bzkoq().s[12]++,'[object DataView]');/** Used to convert symbols to primitives and strings. */const symbolValueOf=(cov_2jop6bzkoq().s[13]++,Symbol.prototype.valueOf);/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){cov_2jop6bzkoq().f[0]++;cov_2jop6bzkoq().s[14]++;switch(tag){case dataViewTag:cov_2jop6bzkoq().b[0][0]++;cov_2jop6bzkoq().s[15]++;if((cov_2jop6bzkoq().b[2][0]++,object.byteLength!=other.byteLength)||(cov_2jop6bzkoq().b[2][1]++,object.byteOffset!=other.byteOffset)){cov_2jop6bzkoq().b[1][0]++;cov_2jop6bzkoq().s[16]++;return false;}else{cov_2jop6bzkoq().b[1][1]++;}cov_2jop6bzkoq().s[17]++;object=object.buffer;cov_2jop6bzkoq().s[18]++;other=other.buffer;case arrayBufferTag:cov_2jop6bzkoq().b[0][1]++;cov_2jop6bzkoq().s[19]++;if((cov_2jop6bzkoq().b[4][0]++,object.byteLength!=other.byteLength)||(cov_2jop6bzkoq().b[4][1]++,!equalFunc(new Uint8Array(object),new Uint8Array(other)))){cov_2jop6bzkoq().b[3][0]++;cov_2jop6bzkoq().s[20]++;return false;}else{cov_2jop6bzkoq().b[3][1]++;}cov_2jop6bzkoq().s[21]++;return true;case boolTag:cov_2jop6bzkoq().b[0][2]++;case dateTag:cov_2jop6bzkoq().b[0][3]++;case numberTag:cov_2jop6bzkoq().b[0][4]++;cov_2jop6bzkoq().s[22]++;// Coerce booleans to `1` or `0` and dates to milliseconds.
// Invalid dates are coerced to `NaN`.
return eq(+object,+other);case errorTag:cov_2jop6bzkoq().b[0][5]++;cov_2jop6bzkoq().s[23]++;return(cov_2jop6bzkoq().b[5][0]++,object.name==other.name)&&(cov_2jop6bzkoq().b[5][1]++,object.message==other.message);case regexpTag:cov_2jop6bzkoq().b[0][6]++;case stringTag:cov_2jop6bzkoq().b[0][7]++;cov_2jop6bzkoq().s[24]++;// Coerce regexes to strings and treat strings, primitives and objects,
// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
// for more details.
return object==`${other}`;case mapTag:cov_2jop6bzkoq().b[0][8]++;let convert=(cov_2jop6bzkoq().s[25]++,mapToArray);case setTag:cov_2jop6bzkoq().b[0][9]++;const isPartial=(cov_2jop6bzkoq().s[26]++,bitmask&COMPARE_PARTIAL_FLAG);cov_2jop6bzkoq().s[27]++;(cov_2jop6bzkoq().b[6][0]++,convert)||(cov_2jop6bzkoq().b[6][1]++,convert=setToArray);cov_2jop6bzkoq().s[28]++;if((cov_2jop6bzkoq().b[8][0]++,object.size!=other.size)&&(cov_2jop6bzkoq().b[8][1]++,!isPartial)){cov_2jop6bzkoq().b[7][0]++;cov_2jop6bzkoq().s[29]++;return false;}else{cov_2jop6bzkoq().b[7][1]++;}// Assume cyclic values are equal.
const stacked=(cov_2jop6bzkoq().s[30]++,stack.get(object));cov_2jop6bzkoq().s[31]++;if(stacked){cov_2jop6bzkoq().b[9][0]++;cov_2jop6bzkoq().s[32]++;return stacked==other;}else{cov_2jop6bzkoq().b[9][1]++;}cov_2jop6bzkoq().s[33]++;bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
cov_2jop6bzkoq().s[34]++;stack.set(object,other);const result=(cov_2jop6bzkoq().s[35]++,equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack));cov_2jop6bzkoq().s[36]++;stack['delete'](object);cov_2jop6bzkoq().s[37]++;return result;case symbolTag:cov_2jop6bzkoq().b[0][10]++;cov_2jop6bzkoq().s[38]++;if(symbolValueOf){cov_2jop6bzkoq().b[10][0]++;cov_2jop6bzkoq().s[39]++;return symbolValueOf.call(object)==symbolValueOf.call(other);}else{cov_2jop6bzkoq().b[10][1]++;}}cov_2jop6bzkoq().s[40]++;return false;}export default equalByTag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,