function cov_2ifqzldy7u(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseConforms.js";var hash="96d8c08aebd50dcd7013d0da418298fbde63ff6a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseConforms.js",statementMap:{"0":{start:{line:12,column:16},end:{line:12,column:28}},"1":{start:{line:13,column:2},end:{line:13,column:58}},"2":{start:{line:13,column:21},end:{line:13,column:58}}},fnMap:{"0":{name:"baseConforms",decl:{start:{line:11,column:9},end:{line:11,column:21}},loc:{start:{line:11,column:30},end:{line:14,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:9},end:{line:13,column:10}},loc:{start:{line:13,column:21},end:{line:13,column:58}},line:13}},branchMap:{},s:{"0":0,"1":0,"2":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"96d8c08aebd50dcd7013d0da418298fbde63ff6a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2ifqzldy7u=function(){return actualCoverage;};}return actualCoverage;}cov_2ifqzldy7u();import baseConformsTo from'./baseConformsTo.js';import keys from'../keys.js';/**
 * The base implementation of `conforms` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property predicates to conform to.
 * @returns {Function} Returns the new spec function.
 */function baseConforms(source){cov_2ifqzldy7u().f[0]++;const props=(cov_2ifqzldy7u().s[0]++,keys(source));cov_2ifqzldy7u().s[1]++;return object=>{cov_2ifqzldy7u().f[1]++;cov_2ifqzldy7u().s[2]++;return baseConformsTo(object,source,props);};}export default baseConforms;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlQ29uZm9ybXNUbyIsImtleXMiLCJiYXNlQ29uZm9ybXMiLCJzb3VyY2UiLCJwcm9wcyIsIm9iamVjdCJdLCJzb3VyY2VzIjpbImJhc2VDb25mb3Jtcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZUNvbmZvcm1zVG8gZnJvbSAnLi9iYXNlQ29uZm9ybXNUby5qcydcclxuaW1wb3J0IGtleXMgZnJvbSAnLi4va2V5cy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XHJcbiAgY29uc3QgcHJvcHMgPSBrZXlzKHNvdXJjZSlcclxuICByZXR1cm4gKG9iamVjdCkgPT4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBiYXNlQ29uZm9ybXNcclxuIl0sIm1hcHBpbmdzIjoiaWtDQWVZO0FBQUEsMkZBZlosTUFBT0EsZUFBYyxLQUFNLHFCQUFxQixDQUNoRCxNQUFPQyxLQUFJLEtBQU0sWUFBWSxDQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLGFBQVksQ0FBQ0MsTUFBTSxDQUFFLHlCQUM1QixLQUFNQyxNQUFLLDBCQUFHSCxJQUFJLENBQUNFLE1BQU0sQ0FBQywwQkFDMUIsTUFBUUUsT0FBTSxFQUFLLHVEQUFBTCxlQUFjLENBQUNLLE1BQU0sQ0FBRUYsTUFBTSxDQUFFQyxLQUFLLENBQUMsQ0FBRCxDQUFDLENBQzFELENBRUEsY0FBZUYsYUFBWSJ9