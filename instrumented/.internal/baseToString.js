function cov_2c3pwst2ti(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseToString.js";var hash="fe148b3dcf7b53c27ee0c49638849fef0385ec76";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseToString.js",statementMap:{"0":{start:{line:4,column:17},end:{line:4,column:22}},"1":{start:{line:7,column:23},end:{line:7,column:48}},"2":{start:{line:19,column:2},end:{line:21,column:3}},"3":{start:{line:20,column:4},end:{line:20,column:16}},"4":{start:{line:22,column:2},end:{line:25,column:3}},"5":{start:{line:24,column:4},end:{line:24,column:39}},"6":{start:{line:26,column:2},end:{line:28,column:3}},"7":{start:{line:27,column:4},end:{line:27,column:59}},"8":{start:{line:29,column:17},end:{line:29,column:27}},"9":{start:{line:30,column:2},end:{line:30,column:68}}},fnMap:{"0":{name:"baseToString",decl:{start:{line:17,column:9},end:{line:17,column:21}},loc:{start:{line:17,column:29},end:{line:31,column:1}},line:17}},branchMap:{"0":{loc:{start:{line:19,column:2},end:{line:21,column:3}},type:"if",locations:[{start:{line:19,column:2},end:{line:21,column:3}},{start:{line:19,column:2},end:{line:21,column:3}}],line:19},"1":{loc:{start:{line:22,column:2},end:{line:25,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:25,column:3}},{start:{line:22,column:2},end:{line:25,column:3}}],line:22},"2":{loc:{start:{line:26,column:2},end:{line:28,column:3}},type:"if",locations:[{start:{line:26,column:2},end:{line:28,column:3}},{start:{line:26,column:2},end:{line:28,column:3}}],line:26},"3":{loc:{start:{line:27,column:11},end:{line:27,column:59}},type:"cond-expr",locations:[{start:{line:27,column:28},end:{line:27,column:54}},{start:{line:27,column:57},end:{line:27,column:59}}],line:27},"4":{loc:{start:{line:30,column:9},end:{line:30,column:68}},type:"cond-expr",locations:[{start:{line:30,column:55},end:{line:30,column:59}},{start:{line:30,column:62},end:{line:30,column:68}}],line:30},"5":{loc:{start:{line:30,column:10},end:{line:30,column:51}},type:"binary-expr",locations:[{start:{line:30,column:10},end:{line:30,column:23}},{start:{line:30,column:27},end:{line:30,column:51}}],line:30}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fe148b3dcf7b53c27ee0c49638849fef0385ec76"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2c3pwst2ti=function(){return actualCoverage;};}return actualCoverage;}cov_2c3pwst2ti();import isSymbol from'../isSymbol.js';/** Used as references for various `Number` constants. */const INFINITY=(cov_2c3pwst2ti().s[0]++,1/0);/** Used to convert symbols to primitives and strings. */const symbolToString=(cov_2c3pwst2ti().s[1]++,Symbol.prototype.toString);/**
 * The base implementation of `toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */function baseToString(value){cov_2c3pwst2ti().f[0]++;cov_2c3pwst2ti().s[2]++;// Exit early for strings to avoid a performance hit in some environments.
if(typeof value==='string'){cov_2c3pwst2ti().b[0][0]++;cov_2c3pwst2ti().s[3]++;return value;}else{cov_2c3pwst2ti().b[0][1]++;}cov_2c3pwst2ti().s[4]++;if(Array.isArray(value)){cov_2c3pwst2ti().b[1][0]++;cov_2c3pwst2ti().s[5]++;// Recursively convert values (susceptible to call stack limits).
return`${value.map(baseToString)}`;}else{cov_2c3pwst2ti().b[1][1]++;}cov_2c3pwst2ti().s[6]++;if(isSymbol(value)){cov_2c3pwst2ti().b[2][0]++;cov_2c3pwst2ti().s[7]++;return symbolToString?(cov_2c3pwst2ti().b[3][0]++,symbolToString.call(value)):(cov_2c3pwst2ti().b[3][1]++,'');}else{cov_2c3pwst2ti().b[2][1]++;}const result=(cov_2c3pwst2ti().s[8]++,`${value}`);cov_2c3pwst2ti().s[9]++;return(cov_2c3pwst2ti().b[5][0]++,result=='0')&&(cov_2c3pwst2ti().b[5][1]++,1/value==-INFINITY)?(cov_2c3pwst2ti().b[4][0]++,'-0'):(cov_2c3pwst2ti().b[4][1]++,result);}export default baseToString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1N5bWJvbCIsIklORklOSVRZIiwic3ltYm9sVG9TdHJpbmciLCJTeW1ib2wiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImJhc2VUb1N0cmluZyIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiY2FsbCIsInJlc3VsdCJdLCJzb3VyY2VzIjpbImJhc2VUb1N0cmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi4vaXNTeW1ib2wuanMnXHJcblxyXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cclxuY29uc3QgSU5GSU5JVFkgPSAxIC8gMFxyXG5cclxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXHJcbmNvbnN0IHN5bWJvbFRvU3RyaW5nID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB0b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcclxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xyXG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiB2YWx1ZVxyXG4gIH1cclxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXHJcbiAgICByZXR1cm4gYCR7dmFsdWUubWFwKGJhc2VUb1N0cmluZyl9YFxyXG4gIH1cclxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XHJcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnXHJcbiAgfVxyXG4gIGNvbnN0IHJlc3VsdCA9IGAke3ZhbHVlfWBcclxuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZVRvU3RyaW5nXHJcbiJdLCJtYXBwaW5ncyI6Im1pRkFlWTtBQUFBLDJGQWZaLE1BQU9BLFNBQVEsS0FBTSxnQkFBZ0IsQ0FFckMseURBQ0EsS0FBTUMsU0FBUSwwQkFBRyxDQUFDLENBQUcsQ0FBQyxFQUV0Qix5REFDQSxLQUFNQyxlQUFjLDBCQUFHQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxFQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0MsYUFBWSxDQUFDQyxLQUFLLENBQUUsaURBQzNCO0FBQ0EsR0FBSSxNQUFPQSxNQUFLLEdBQUssUUFBUSxDQUFFLG9EQUM3QixNQUFPQSxNQUFLLENBQ2QsQ0FBQyx5REFDRCxHQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDLENBQUUsb0RBQ3hCO0FBQ0EsTUFBUSxHQUFFQSxLQUFLLENBQUNHLEdBQUcsQ0FBQ0osWUFBWSxDQUFFLEVBQUMsQ0FDckMsQ0FBQyx5REFDRCxHQUFJTixRQUFRLENBQUNPLEtBQUssQ0FBQyxDQUFFLG9EQUNuQixNQUFPTCxlQUFjLDZCQUFHQSxjQUFjLENBQUNTLElBQUksQ0FBQ0osS0FBSyxDQUFDLDhCQUFHLEVBQUUsRUFDekQsQ0FBQyxpQ0FDRCxLQUFNSyxPQUFNLDBCQUFJLEdBQUVMLEtBQU0sRUFBQywwQkFDekIsTUFBUSw0QkFBQUssTUFBTSxFQUFJLEdBQUcsK0JBQUssQ0FBQyxDQUFHTCxLQUFLLEVBQUssQ0FBQ04sUUFBUSw4QkFBSSxJQUFJLDhCQUFHVyxNQUFNLEVBQ3BFLENBRUEsY0FBZU4sYUFBWSJ9