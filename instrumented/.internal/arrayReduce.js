function cov_2c3u1rz70x(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\arrayReduce.js";var hash="acb2e2b49c13529606f1d7cff7b5dd46ca4444c7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\arrayReduce.js",statementMap:{"0":{start:{line:13,column:14},end:{line:13,column:16}},"1":{start:{line:14,column:17},end:{line:14,column:49}},"2":{start:{line:16,column:2},end:{line:18,column:3}},"3":{start:{line:17,column:4},end:{line:17,column:32}},"4":{start:{line:19,column:2},end:{line:21,column:3}},"5":{start:{line:20,column:4},end:{line:20,column:67}},"6":{start:{line:22,column:2},end:{line:22,column:20}}},fnMap:{"0":{name:"arrayReduce",decl:{start:{line:12,column:9},end:{line:12,column:20}},loc:{start:{line:12,column:62},end:{line:23,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:14,column:17},end:{line:14,column:49}},type:"cond-expr",locations:[{start:{line:14,column:33},end:{line:14,column:34}},{start:{line:14,column:37},end:{line:14,column:49}}],line:14},"1":{loc:{start:{line:16,column:2},end:{line:18,column:3}},type:"if",locations:[{start:{line:16,column:2},end:{line:18,column:3}},{start:{line:16,column:2},end:{line:18,column:3}}],line:16},"2":{loc:{start:{line:16,column:6},end:{line:16,column:25}},type:"binary-expr",locations:[{start:{line:16,column:6},end:{line:16,column:15}},{start:{line:16,column:19},end:{line:16,column:25}}],line:16}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"acb2e2b49c13529606f1d7cff7b5dd46ca4444c7"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2c3u1rz70x=function(){return actualCoverage;};}return actualCoverage;}cov_2c3u1rz70x();/**
 * A specialized version of `reduce` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */function arrayReduce(array,iteratee,accumulator,initAccum){cov_2c3u1rz70x().f[0]++;let index=(cov_2c3u1rz70x().s[0]++,-1);const length=(cov_2c3u1rz70x().s[1]++,array==null?(cov_2c3u1rz70x().b[0][0]++,0):(cov_2c3u1rz70x().b[0][1]++,array.length));cov_2c3u1rz70x().s[2]++;if((cov_2c3u1rz70x().b[2][0]++,initAccum)&&(cov_2c3u1rz70x().b[2][1]++,length)){cov_2c3u1rz70x().b[1][0]++;cov_2c3u1rz70x().s[3]++;accumulator=array[++index];}else{cov_2c3u1rz70x().b[1][1]++;}cov_2c3u1rz70x().s[4]++;while(++index<length){cov_2c3u1rz70x().s[5]++;accumulator=iteratee(accumulator,array[index],index,array);}cov_2c3u1rz70x().s[6]++;return accumulator;}export default arrayReduce;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcnJheVJlZHVjZSIsImFycmF5IiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImluaXRBY2N1bSIsImluZGV4IiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiYXJyYXlSZWR1Y2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgcmVkdWNlYCBmb3IgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXHJcbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cclxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcclxuICogIHRoZSBpbml0aWFsIHZhbHVlLlxyXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXHJcbiAqL1xyXG5mdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcclxuICBsZXQgaW5kZXggPSAtMVxyXG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoXHJcblxyXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XHJcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdXHJcbiAgfVxyXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XHJcbiAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSlcclxuICB9XHJcbiAgcmV0dXJuIGFjY3VtdWxhdG9yXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFycmF5UmVkdWNlXHJcbiJdLCJtYXBwaW5ncyI6InV3REFlWTtBQUFBLDJGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQSxZQUFXLENBQUNDLEtBQUssQ0FBRUMsUUFBUSxDQUFFQyxXQUFXLENBQUVDLFNBQVMsQ0FBRSx5QkFDNUQsR0FBSUMsTUFBSywwQkFBRyxDQUFDLENBQUMsRUFDZCxLQUFNQyxPQUFNLDBCQUFHTCxLQUFLLEVBQUksSUFBSSw2QkFBRyxDQUFDLDhCQUFHQSxLQUFLLENBQUNLLE1BQU0sMkJBRS9DLEdBQUksNEJBQUFGLFNBQVMsK0JBQUlFLE1BQU0sRUFBRSxvREFDdkJILFdBQVcsQ0FBR0YsS0FBSyxDQUFDLEVBQUVJLEtBQUssQ0FBQyxDQUM5QixDQUFDLHlEQUNELE1BQU8sRUFBRUEsS0FBSyxDQUFHQyxNQUFNLENBQUUseUJBQ3ZCSCxXQUFXLENBQUdELFFBQVEsQ0FBQ0MsV0FBVyxDQUFFRixLQUFLLENBQUNJLEtBQUssQ0FBQyxDQUFFQSxLQUFLLENBQUVKLEtBQUssQ0FBQyxDQUNqRSxDQUFDLHdCQUNELE1BQU9FLFlBQVcsQ0FDcEIsQ0FFQSxjQUFlSCxZQUFXIn0=