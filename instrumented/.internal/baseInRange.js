function cov_y1ubqofhz(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseInRange.js";var hash="3df2eb3dd7d051108644793bd35e2c350fec10bc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseInRange.js",statementMap:{"0":{start:{line:11,column:2},end:{line:11,column:72}}},fnMap:{"0":{name:"baseInRange",decl:{start:{line:10,column:9},end:{line:10,column:20}},loc:{start:{line:10,column:41},end:{line:12,column:1}},line:10}},branchMap:{"0":{loc:{start:{line:11,column:9},end:{line:11,column:72}},type:"binary-expr",locations:[{start:{line:11,column:9},end:{line:11,column:39}},{start:{line:11,column:43},end:{line:11,column:72}}],line:11}},s:{"0":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3df2eb3dd7d051108644793bd35e2c350fec10bc"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_y1ubqofhz=function(){return actualCoverage;};}return actualCoverage;}cov_y1ubqofhz();/**
 * The base implementation of `inRange` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */function baseInRange(number,start,end){cov_y1ubqofhz().f[0]++;cov_y1ubqofhz().s[0]++;return(cov_y1ubqofhz().b[0][0]++,number>=Math.min(start,end))&&(cov_y1ubqofhz().b[0][1]++,number<Math.max(start,end));}export default baseInRange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlSW5SYW5nZSIsIm51bWJlciIsInN0YXJ0IiwiZW5kIiwiTWF0aCIsIm1pbiIsIm1heCJdLCJzb3VyY2VzIjpbImJhc2VJblJhbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcclxuICByZXR1cm4gbnVtYmVyID49IE1hdGgubWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IE1hdGgubWF4KHN0YXJ0LCBlbmQpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJhc2VJblJhbmdlXHJcbiJdLCJtYXBwaW5ncyI6IjIvQkFlWTtBQUFBLHlGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNBLFlBQVcsQ0FBQ0MsTUFBTSxDQUFFQyxLQUFLLENBQUVDLEdBQUcsQ0FBRSwrQ0FDdkMsTUFBTywyQkFBQUYsTUFBTSxFQUFJRyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0gsS0FBSyxDQUFFQyxHQUFHLENBQUMsOEJBQUlGLE1BQU0sQ0FBR0csSUFBSSxDQUFDRSxHQUFHLENBQUNKLEtBQUssQ0FBRUMsR0FBRyxDQUFDLEVBQ3hFLENBRUEsY0FBZUgsWUFBVyJ9