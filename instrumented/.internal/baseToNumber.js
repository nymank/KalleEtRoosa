function cov_89fr4euej(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseToNumber.js";var hash="b5e4474b2c65260885deae84cb41785d846d47b9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseToNumber.js",statementMap:{"0":{start:{line:4,column:12},end:{line:4,column:17}},"1":{start:{line:15,column:2},end:{line:17,column:3}},"2":{start:{line:16,column:4},end:{line:16,column:16}},"3":{start:{line:18,column:2},end:{line:20,column:3}},"4":{start:{line:19,column:4},end:{line:19,column:14}},"5":{start:{line:21,column:2},end:{line:21,column:15}}},fnMap:{"0":{name:"baseToNumber",decl:{start:{line:14,column:9},end:{line:14,column:21}},loc:{start:{line:14,column:29},end:{line:22,column:1}},line:14}},branchMap:{"0":{loc:{start:{line:15,column:2},end:{line:17,column:3}},type:"if",locations:[{start:{line:15,column:2},end:{line:17,column:3}},{start:{line:15,column:2},end:{line:17,column:3}}],line:15},"1":{loc:{start:{line:18,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:18,column:2},end:{line:20,column:3}},{start:{line:18,column:2},end:{line:20,column:3}}],line:18}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b5e4474b2c65260885deae84cb41785d846d47b9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_89fr4euej=function(){return actualCoverage;};}return actualCoverage;}cov_89fr4euej();import isSymbol from'../isSymbol.js';/** Used as references for various `Number` constants. */const NAN=(cov_89fr4euej().s[0]++,0/0);/**
 * The base implementation of `toNumber` which doesn't ensure correct
 * conversions of binary, hexadecimal, or octal string values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 */function baseToNumber(value){cov_89fr4euej().f[0]++;cov_89fr4euej().s[1]++;if(typeof value==='number'){cov_89fr4euej().b[0][0]++;cov_89fr4euej().s[2]++;return value;}else{cov_89fr4euej().b[0][1]++;}cov_89fr4euej().s[3]++;if(isSymbol(value)){cov_89fr4euej().b[1][0]++;cov_89fr4euej().s[4]++;return NAN;}else{cov_89fr4euej().b[1][1]++;}cov_89fr4euej().s[5]++;return+value;}export default baseToNumber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1N5bWJvbCIsIk5BTiIsImJhc2VUb051bWJlciIsInZhbHVlIl0sInNvdXJjZXMiOlsiYmFzZVRvTnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc1N5bWJvbCBmcm9tICcuLi9pc1N5bWJvbC5qcydcclxuXHJcbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xyXG5jb25zdCBOQU4gPSAwIC8gMFxyXG5cclxuLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB0b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxyXG4gKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgcmV0dXJuIHZhbHVlXHJcbiAgfVxyXG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcclxuICAgIHJldHVybiBOQU5cclxuICB9XHJcbiAgcmV0dXJuICt2YWx1ZVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBiYXNlVG9OdW1iZXJcclxuIl0sIm1hcHBpbmdzIjoidStDQWVZO0FBQUEseUZBZlosTUFBT0EsU0FBUSxLQUFNLGdCQUFnQixDQUVyQyx5REFDQSxLQUFNQyxJQUFHLHlCQUFHLENBQUMsQ0FBRyxDQUFDLEVBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQyxhQUFZLENBQUNDLEtBQUssQ0FBRSwrQ0FDM0IsR0FBSSxNQUFPQSxNQUFLLEdBQUssUUFBUSxDQUFFLGtEQUM3QixNQUFPQSxNQUFLLENBQ2QsQ0FBQyx1REFDRCxHQUFJSCxRQUFRLENBQUNHLEtBQUssQ0FBQyxDQUFFLGtEQUNuQixNQUFPRixJQUFHLENBQ1osQ0FBQyx1REFDRCxNQUFPLENBQUNFLEtBQUssQ0FDZixDQUVBLGNBQWVELGFBQVkifQ==