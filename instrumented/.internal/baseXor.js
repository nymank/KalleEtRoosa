function cov_1r01vf9f92(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseXor.js";var hash="6f5177cff4ad805565701521de9f2f150f86bde5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseXor.js",statementMap:{"0":{start:{line:16,column:17},end:{line:16,column:30}},"1":{start:{line:17,column:2},end:{line:19,column:3}},"2":{start:{line:18,column:4},end:{line:18,column:44}},"3":{start:{line:20,column:14},end:{line:20,column:16}},"4":{start:{line:21,column:17},end:{line:21,column:34}},"5":{start:{line:23,column:2},end:{line:32,column:3}},"6":{start:{line:24,column:18},end:{line:24,column:31}},"7":{start:{line:25,column:19},end:{line:25,column:21}},"8":{start:{line:27,column:4},end:{line:31,column:5}},"9":{start:{line:28,column:6},end:{line:30,column:7}},"10":{start:{line:29,column:8},end:{line:29,column:102}},"11":{start:{line:33,column:2},end:{line:33,column:63}}},fnMap:{"0":{name:"baseXor",decl:{start:{line:15,column:9},end:{line:15,column:16}},loc:{start:{line:15,column:47},end:{line:34,column:1}},line:15}},branchMap:{"0":{loc:{start:{line:17,column:2},end:{line:19,column:3}},type:"if",locations:[{start:{line:17,column:2},end:{line:19,column:3}},{start:{line:17,column:2},end:{line:19,column:3}}],line:17},"1":{loc:{start:{line:18,column:11},end:{line:18,column:44}},type:"cond-expr",locations:[{start:{line:18,column:20},end:{line:18,column:39}},{start:{line:18,column:42},end:{line:18,column:44}}],line:18},"2":{loc:{start:{line:28,column:6},end:{line:30,column:7}},type:"if",locations:[{start:{line:28,column:6},end:{line:30,column:7}},{start:{line:28,column:6},end:{line:30,column:7}}],line:28},"3":{loc:{start:{line:29,column:39},end:{line:29,column:61}},type:"binary-expr",locations:[{start:{line:29,column:39},end:{line:29,column:52}},{start:{line:29,column:56},end:{line:29,column:61}}],line:29}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6f5177cff4ad805565701521de9f2f150f86bde5"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1r01vf9f92=function(){return actualCoverage;};}return actualCoverage;}cov_1r01vf9f92();import baseDifference from'./baseDifference.js';import baseFlatten from'./baseFlatten.js';import baseUniq from'./baseUniq.js';/**
 * The base implementation of methods like `xor` which accepts an array of
 * arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of values.
 */function baseXor(arrays,iteratee,comparator){cov_1r01vf9f92().f[0]++;const length=(cov_1r01vf9f92().s[0]++,arrays.length);cov_1r01vf9f92().s[1]++;if(length<2){cov_1r01vf9f92().b[0][0]++;cov_1r01vf9f92().s[2]++;return length?(cov_1r01vf9f92().b[1][0]++,baseUniq(arrays[0])):(cov_1r01vf9f92().b[1][1]++,[]);}else{cov_1r01vf9f92().b[0][1]++;}let index=(cov_1r01vf9f92().s[3]++,-1);const result=(cov_1r01vf9f92().s[4]++,new Array(length));cov_1r01vf9f92().s[5]++;while(++index<length){const array=(cov_1r01vf9f92().s[6]++,arrays[index]);let othIndex=(cov_1r01vf9f92().s[7]++,-1);cov_1r01vf9f92().s[8]++;while(++othIndex<length){cov_1r01vf9f92().s[9]++;if(othIndex!=index){cov_1r01vf9f92().b[2][0]++;cov_1r01vf9f92().s[10]++;result[index]=baseDifference((cov_1r01vf9f92().b[3][0]++,result[index])||(cov_1r01vf9f92().b[3][1]++,array),arrays[othIndex],iteratee,comparator);}else{cov_1r01vf9f92().b[2][1]++;}}}cov_1r01vf9f92().s[11]++;return baseUniq(baseFlatten(result,1),iteratee,comparator);}export default baseXor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlRGlmZmVyZW5jZSIsImJhc2VGbGF0dGVuIiwiYmFzZVVuaXEiLCJiYXNlWG9yIiwiYXJyYXlzIiwiaXRlcmF0ZWUiLCJjb21wYXJhdG9yIiwibGVuZ3RoIiwiaW5kZXgiLCJyZXN1bHQiLCJBcnJheSIsImFycmF5Iiwib3RoSW5kZXgiXSwic291cmNlcyI6WyJiYXNlWG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlRGlmZmVyZW5jZSBmcm9tICcuL2Jhc2VEaWZmZXJlbmNlLmpzJ1xyXG5pbXBvcnQgYmFzZUZsYXR0ZW4gZnJvbSAnLi9iYXNlRmxhdHRlbi5qcydcclxuaW1wb3J0IGJhc2VVbmlxIGZyb20gJy4vYmFzZVVuaXEuanMnXHJcblxyXG4vKipcclxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGB4b3JgIHdoaWNoIGFjY2VwdHMgYW4gYXJyYXkgb2ZcclxuICogYXJyYXlzIHRvIGluc3BlY3QuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcclxuICBjb25zdCBsZW5ndGggPSBhcnJheXMubGVuZ3RoXHJcbiAgaWYgKGxlbmd0aCA8IDIpIHtcclxuICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW11cclxuICB9XHJcbiAgbGV0IGluZGV4ID0gLTFcclxuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKVxyXG5cclxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xyXG4gICAgY29uc3QgYXJyYXkgPSBhcnJheXNbaW5kZXhdXHJcbiAgICBsZXQgb3RoSW5kZXggPSAtMVxyXG5cclxuICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XHJcbiAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xyXG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcilcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJhc2VYb3JcclxuIl0sIm1hcHBpbmdzIjoiNHZFQWVZO0FBQUEsMkZBZlosTUFBT0EsZUFBYyxLQUFNLHFCQUFxQixDQUNoRCxNQUFPQyxZQUFXLEtBQU0sa0JBQWtCLENBQzFDLE1BQU9DLFNBQVEsS0FBTSxlQUFlLENBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0MsUUFBTyxDQUFDQyxNQUFNLENBQUVDLFFBQVEsQ0FBRUMsVUFBVSxDQUFFLHlCQUM3QyxLQUFNQyxPQUFNLDBCQUFHSCxNQUFNLENBQUNHLE1BQU0sMEJBQzVCLEdBQUlBLE1BQU0sQ0FBRyxDQUFDLENBQUUsb0RBQ2QsTUFBT0EsT0FBTSw2QkFBR0wsUUFBUSxDQUFDRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsOEJBQUcsRUFBRSxFQUMxQyxDQUFDLGlDQUNELEdBQUlJLE1BQUssMEJBQUcsQ0FBQyxDQUFDLEVBQ2QsS0FBTUMsT0FBTSwwQkFBRyxHQUFJQyxNQUFLLENBQUNILE1BQU0sQ0FBQywwQkFFaEMsTUFBTyxFQUFFQyxLQUFLLENBQUdELE1BQU0sQ0FBRSxDQUN2QixLQUFNSSxNQUFLLDBCQUFHUCxNQUFNLENBQUNJLEtBQUssQ0FBQyxFQUMzQixHQUFJSSxTQUFRLDBCQUFHLENBQUMsQ0FBQywwQkFFakIsTUFBTyxFQUFFQSxRQUFRLENBQUdMLE1BQU0sQ0FBRSx5QkFDMUIsR0FBSUssUUFBUSxFQUFJSixLQUFLLENBQUUscURBQ3JCQyxNQUFNLENBQUNELEtBQUssQ0FBQyxDQUFHUixjQUFjLENBQUMsNEJBQUFTLE1BQU0sQ0FBQ0QsS0FBSyxDQUFDLCtCQUFJRyxLQUFLLEVBQUVQLE1BQU0sQ0FBQ1EsUUFBUSxDQUFDLENBQUVQLFFBQVEsQ0FBRUMsVUFBVSxDQUFDLENBQ2hHLENBQUMsaUNBQ0gsQ0FDRixDQUFDLHlCQUNELE1BQU9KLFNBQVEsQ0FBQ0QsV0FBVyxDQUFDUSxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUVKLFFBQVEsQ0FBRUMsVUFBVSxDQUFDLENBQy9ELENBRUEsY0FBZUgsUUFBTyJ9