function cov_huzu8zvix(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseUnset.js";var hash="b34d57c88e8ed0ad2950497d8527daa0aea62d76";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseUnset.js",statementMap:{"0":{start:{line:15,column:2},end:{line:15,column:31}},"1":{start:{line:16,column:2},end:{line:16,column:31}},"2":{start:{line:17,column:2},end:{line:17,column:59}}},fnMap:{"0":{name:"baseUnset",decl:{start:{line:14,column:9},end:{line:14,column:18}},loc:{start:{line:14,column:33},end:{line:18,column:1}},line:14}},branchMap:{"0":{loc:{start:{line:17,column:9},end:{line:17,column:59}},type:"binary-expr",locations:[{start:{line:17,column:9},end:{line:17,column:23}},{start:{line:17,column:27},end:{line:17,column:59}}],line:17}},s:{"0":0,"1":0,"2":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b34d57c88e8ed0ad2950497d8527daa0aea62d76"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_huzu8zvix=function(){return actualCoverage;};}return actualCoverage;}cov_huzu8zvix();import castPath from'./castPath.js';import last from'../last.js';import parent from'./parent.js';import toKey from'./toKey.js';/**
 * The base implementation of `unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */function baseUnset(object,path){cov_huzu8zvix().f[0]++;cov_huzu8zvix().s[0]++;path=castPath(path,object);cov_huzu8zvix().s[1]++;object=parent(object,path);cov_huzu8zvix().s[2]++;return(cov_huzu8zvix().b[0][0]++,object==null)||(cov_huzu8zvix().b[0][1]++,delete object[toKey(last(path))]);}export default baseUnset;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYXN0UGF0aCIsImxhc3QiLCJwYXJlbnQiLCJ0b0tleSIsImJhc2VVbnNldCIsIm9iamVjdCIsInBhdGgiXSwic291cmNlcyI6WyJiYXNlVW5zZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vY2FzdFBhdGguanMnXHJcbmltcG9ydCBsYXN0IGZyb20gJy4uL2xhc3QuanMnXHJcbmltcG9ydCBwYXJlbnQgZnJvbSAnLi9wYXJlbnQuanMnXHJcbmltcG9ydCB0b0tleSBmcm9tICcuL3RvS2V5LmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB1bnNldGAuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXHJcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cclxuICovXHJcbmZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcclxuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KVxyXG4gIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpXHJcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJhc2VVbnNldFxyXG4iXSwibWFwcGluZ3MiOiIrbUNBZVk7QUFBQSx5RkFmWixNQUFPQSxTQUFRLEtBQU0sZUFBZSxDQUNwQyxNQUFPQyxLQUFJLEtBQU0sWUFBWSxDQUM3QixNQUFPQyxPQUFNLEtBQU0sYUFBYSxDQUNoQyxNQUFPQyxNQUFLLEtBQU0sWUFBWSxDQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0MsVUFBUyxDQUFDQyxNQUFNLENBQUVDLElBQUksQ0FBRSwrQ0FDL0JBLElBQUksQ0FBR04sUUFBUSxDQUFDTSxJQUFJLENBQUVELE1BQU0sQ0FBQyx3QkFDN0JBLE1BQU0sQ0FBR0gsTUFBTSxDQUFDRyxNQUFNLENBQUVDLElBQUksQ0FBQyx3QkFDN0IsTUFBTywyQkFBQUQsTUFBTSxFQUFJLElBQUksOEJBQUksTUFBT0EsT0FBTSxDQUFDRixLQUFLLENBQUNGLElBQUksQ0FBQ0ssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUMzRCxDQUVBLGNBQWVGLFVBQVMifQ==