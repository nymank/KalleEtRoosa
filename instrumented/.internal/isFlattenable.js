function cov_11r8e26d8l(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\isFlattenable.js";var hash="505eb6cd0dddbcfa5b25952b4af25ef321840812";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\isFlattenable.js",statementMap:{"0":{start:{line:4,column:25},end:{line:4,column:50}},"1":{start:{line:14,column:2},end:{line:15,column:40}}},fnMap:{"0":{name:"isFlattenable",decl:{start:{line:13,column:9},end:{line:13,column:22}},loc:{start:{line:13,column:30},end:{line:16,column:1}},line:13}},branchMap:{"0":{loc:{start:{line:14,column:9},end:{line:15,column:40}},type:"binary-expr",locations:[{start:{line:14,column:9},end:{line:14,column:29}},{start:{line:14,column:33},end:{line:14,column:51}},{start:{line:15,column:4},end:{line:15,column:40}}],line:14},"1":{loc:{start:{line:15,column:7},end:{line:15,column:39}},type:"binary-expr",locations:[{start:{line:15,column:7},end:{line:15,column:12}},{start:{line:15,column:16},end:{line:15,column:39}}],line:15}},s:{"0":0,"1":0},f:{"0":0},b:{"0":[0,0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"505eb6cd0dddbcfa5b25952b4af25ef321840812"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_11r8e26d8l=function(){return actualCoverage;};}return actualCoverage;}cov_11r8e26d8l();import isArguments from'../isArguments.js';/** Built-in value reference. */const spreadableSymbol=(cov_11r8e26d8l().s[0]++,Symbol.isConcatSpreadable);/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */function isFlattenable(value){cov_11r8e26d8l().f[0]++;cov_11r8e26d8l().s[1]++;return(cov_11r8e26d8l().b[0][0]++,Array.isArray(value))||(cov_11r8e26d8l().b[0][1]++,isArguments(value))||(cov_11r8e26d8l().b[0][2]++,!!((cov_11r8e26d8l().b[1][0]++,value)&&(cov_11r8e26d8l().b[1][1]++,value[spreadableSymbol])));}export default isFlattenable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0FyZ3VtZW50cyIsInNwcmVhZGFibGVTeW1ib2wiLCJTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJpc0ZsYXR0ZW5hYmxlIiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlcyI6WyJpc0ZsYXR0ZW5hYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuLi9pc0FyZ3VtZW50cy5qcydcclxuXHJcbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2UuICovXHJcbmNvbnN0IHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlXHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xyXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcclxuICAgICEhKHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpc0ZsYXR0ZW5hYmxlXHJcbiJdLCJtYXBwaW5ncyI6IncwQ0FlWTtBQUFBLDJGQWZaLE1BQU9BLFlBQVcsS0FBTSxtQkFBbUIsQ0FFM0MsZ0NBQ0EsS0FBTUMsaUJBQWdCLDBCQUFHQyxNQUFNLENBQUNDLGtCQUFrQixFQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLGNBQWEsQ0FBQ0MsS0FBSyxDQUFFLGlEQUM1QixNQUFPLDRCQUFBQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDLCtCQUFJTCxXQUFXLENBQUNLLEtBQUssQ0FBQywrQkFDL0MsQ0FBQyxFQUFFLDRCQUFBQSxLQUFLLCtCQUFJQSxLQUFLLENBQUNKLGdCQUFnQixDQUFDLEVBQUMsRUFDeEMsQ0FFQSxjQUFlRyxjQUFhIn0=