function cov_16zzch8w16(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\composeArgsRight.js";var hash="ea2f0ca9216cb9dd8b70007aa86b241f65659739";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\composeArgsRight.js",statementMap:{"0":{start:{line:13,column:18},end:{line:13,column:20}},"1":{start:{line:14,column:21},end:{line:14,column:23}},"2":{start:{line:15,column:19},end:{line:15,column:21}},"3":{start:{line:17,column:21},end:{line:17,column:32}},"4":{start:{line:18,column:24},end:{line:18,column:38}},"5":{start:{line:19,column:22},end:{line:19,column:37}},"6":{start:{line:20,column:22},end:{line:20,column:61}},"7":{start:{line:21,column:17},end:{line:21,column:53}},"8":{start:{line:22,column:22},end:{line:22,column:32}},"9":{start:{line:24,column:2},end:{line:26,column:3}},"10":{start:{line:25,column:4},end:{line:25,column:39}},"11":{start:{line:27,column:17},end:{line:27,column:26}},"12":{start:{line:28,column:2},end:{line:30,column:3}},"13":{start:{line:29,column:4},end:{line:29,column:54}},"14":{start:{line:31,column:2},end:{line:35,column:3}},"15":{start:{line:32,column:4},end:{line:34,column:5}},"16":{start:{line:33,column:6},end:{line:33,column:64}},"17":{start:{line:36,column:2},end:{line:36,column:15}}},fnMap:{"0":{name:"composeArgsRight",decl:{start:{line:12,column:9},end:{line:12,column:25}},loc:{start:{line:12,column:62},end:{line:37,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:32,column:4},end:{line:34,column:5}}],line:32},"1":{loc:{start:{line:32,column:8},end:{line:32,column:45}},type:"binary-expr",locations:[{start:{line:32,column:8},end:{line:32,column:19}},{start:{line:32,column:23},end:{line:32,column:45}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ea2f0ca9216cb9dd8b70007aa86b241f65659739"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_16zzch8w16=function(){return actualCoverage;};}return actualCoverage;}cov_16zzch8w16();/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */function composeArgsRight(args,partials,holders,isCurried){cov_16zzch8w16().f[0]++;let argsIndex=(cov_16zzch8w16().s[0]++,-1);let holdersIndex=(cov_16zzch8w16().s[1]++,-1);let rightIndex=(cov_16zzch8w16().s[2]++,-1);const argsLength=(cov_16zzch8w16().s[3]++,args.length);const holdersLength=(cov_16zzch8w16().s[4]++,holders.length);const rightLength=(cov_16zzch8w16().s[5]++,partials.length);const rangeLength=(cov_16zzch8w16().s[6]++,Math.max(argsLength-holdersLength,0));const result=(cov_16zzch8w16().s[7]++,new Array(rangeLength+rightLength));const isUncurried=(cov_16zzch8w16().s[8]++,!isCurried);cov_16zzch8w16().s[9]++;while(++argsIndex<rangeLength){cov_16zzch8w16().s[10]++;result[argsIndex]=args[argsIndex];}const offset=(cov_16zzch8w16().s[11]++,argsIndex);cov_16zzch8w16().s[12]++;while(++rightIndex<rightLength){cov_16zzch8w16().s[13]++;result[offset+rightIndex]=partials[rightIndex];}cov_16zzch8w16().s[14]++;while(++holdersIndex<holdersLength){cov_16zzch8w16().s[15]++;if((cov_16zzch8w16().b[1][0]++,isUncurried)||(cov_16zzch8w16().b[1][1]++,argsIndex<argsLength)){cov_16zzch8w16().b[0][0]++;cov_16zzch8w16().s[16]++;result[offset+holders[holdersIndex]]=args[argsIndex++];}else{cov_16zzch8w16().b[0][1]++;}}cov_16zzch8w16().s[17]++;return result;}export default composeArgsRight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21wb3NlQXJnc1JpZ2h0IiwiYXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJhcmdzTGVuZ3RoIiwibGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsInJpZ2h0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJNYXRoIiwibWF4IiwicmVzdWx0IiwiQXJyYXkiLCJpc1VuY3VycmllZCIsIm9mZnNldCJdLCJzb3VyY2VzIjpbImNvbXBvc2VBcmdzUmlnaHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cclxuICogaXMgdGFpbG9yZWQgZm9yIGBwYXJ0aWFsUmlnaHRgLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxyXG4gKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXHJcbiAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cclxuICovXHJcbmZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xyXG4gIGxldCBhcmdzSW5kZXggPSAtMVxyXG4gIGxldCBob2xkZXJzSW5kZXggPSAtMVxyXG4gIGxldCByaWdodEluZGV4ID0gLTFcclxuXHJcbiAgY29uc3QgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoXHJcbiAgY29uc3QgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoXHJcbiAgY29uc3QgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGhcclxuICBjb25zdCByYW5nZUxlbmd0aCA9IE1hdGgubWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKVxyXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKVxyXG4gIGNvbnN0IGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZFxyXG5cclxuICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xyXG4gICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF1cclxuICB9XHJcbiAgY29uc3Qgb2Zmc2V0ID0gYXJnc0luZGV4XHJcbiAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XHJcbiAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XVxyXG4gIH1cclxuICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XHJcbiAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xyXG4gICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZUFyZ3NSaWdodFxyXG4iXSwibWFwcGluZ3MiOiJzdkVBZVk7QUFBQSwyRkFmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0EsaUJBQWdCLENBQUNDLElBQUksQ0FBRUMsUUFBUSxDQUFFQyxPQUFPLENBQUVDLFNBQVMsQ0FBRSx5QkFDNUQsR0FBSUMsVUFBUywwQkFBRyxDQUFDLENBQUMsRUFDbEIsR0FBSUMsYUFBWSwwQkFBRyxDQUFDLENBQUMsRUFDckIsR0FBSUMsV0FBVSwwQkFBRyxDQUFDLENBQUMsRUFFbkIsS0FBTUMsV0FBVSwwQkFBR1AsSUFBSSxDQUFDUSxNQUFNLEVBQzlCLEtBQU1DLGNBQWEsMEJBQUdQLE9BQU8sQ0FBQ00sTUFBTSxFQUNwQyxLQUFNRSxZQUFXLDBCQUFHVCxRQUFRLENBQUNPLE1BQU0sRUFDbkMsS0FBTUcsWUFBVywwQkFBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUNOLFVBQVUsQ0FBR0UsYUFBYSxDQUFFLENBQUMsQ0FBQyxFQUMzRCxLQUFNSyxPQUFNLDBCQUFHLEdBQUlDLE1BQUssQ0FBQ0osV0FBVyxDQUFHRCxXQUFXLENBQUMsRUFDbkQsS0FBTU0sWUFBVywwQkFBRyxDQUFDYixTQUFTLDBCQUU5QixNQUFPLEVBQUVDLFNBQVMsQ0FBR08sV0FBVyxDQUFFLDBCQUNoQ0csTUFBTSxDQUFDVixTQUFTLENBQUMsQ0FBR0osSUFBSSxDQUFDSSxTQUFTLENBQUMsQ0FDckMsQ0FDQSxLQUFNYSxPQUFNLDJCQUFHYixTQUFTLDJCQUN4QixNQUFPLEVBQUVFLFVBQVUsQ0FBR0ksV0FBVyxDQUFFLDBCQUNqQ0ksTUFBTSxDQUFDRyxNQUFNLENBQUdYLFVBQVUsQ0FBQyxDQUFHTCxRQUFRLENBQUNLLFVBQVUsQ0FBQyxDQUNwRCxDQUFDLHlCQUNELE1BQU8sRUFBRUQsWUFBWSxDQUFHSSxhQUFhLENBQUUsMEJBQ3JDLEdBQUksNEJBQUFPLFdBQVcsK0JBQUlaLFNBQVMsQ0FBR0csVUFBVSxFQUFFLHFEQUN6Q08sTUFBTSxDQUFDRyxNQUFNLENBQUdmLE9BQU8sQ0FBQ0csWUFBWSxDQUFDLENBQUMsQ0FBR0wsSUFBSSxDQUFDSSxTQUFTLEVBQUUsQ0FBQyxDQUM1RCxDQUFDLGlDQUNILENBQUMseUJBQ0QsTUFBT1UsT0FBTSxDQUNmLENBRUEsY0FBZWYsaUJBQWdCIn0=