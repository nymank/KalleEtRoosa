function cov_w9jz6e11u(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\arrayIncludesWith.js";var hash="d92723e1fcc55554b9a3c19a8c1410f5cd148498";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\arrayIncludesWith.js",statementMap:{"0":{start:{line:11,column:2},end:{line:13,column:3}},"1":{start:{line:12,column:4},end:{line:12,column:16}},"2":{start:{line:15,column:2},end:{line:19,column:3}},"3":{start:{line:16,column:4},end:{line:18,column:5}},"4":{start:{line:17,column:6},end:{line:17,column:17}},"5":{start:{line:20,column:2},end:{line:20,column:14}}},fnMap:{"0":{name:"arrayIncludesWith",decl:{start:{line:10,column:9},end:{line:10,column:26}},loc:{start:{line:10,column:54},end:{line:21,column:1}},line:10}},branchMap:{"0":{loc:{start:{line:11,column:2},end:{line:13,column:3}},type:"if",locations:[{start:{line:11,column:2},end:{line:13,column:3}},{start:{line:11,column:2},end:{line:13,column:3}}],line:11},"1":{loc:{start:{line:16,column:4},end:{line:18,column:5}},type:"if",locations:[{start:{line:16,column:4},end:{line:18,column:5}},{start:{line:16,column:4},end:{line:18,column:5}}],line:16}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d92723e1fcc55554b9a3c19a8c1410f5cd148498"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_w9jz6e11u=function(){return actualCoverage;};}return actualCoverage;}cov_w9jz6e11u();/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */function arrayIncludesWith(array,target,comparator){cov_w9jz6e11u().f[0]++;cov_w9jz6e11u().s[0]++;if(array==null){cov_w9jz6e11u().b[0][0]++;cov_w9jz6e11u().s[1]++;return false;}else{cov_w9jz6e11u().b[0][1]++;}cov_w9jz6e11u().s[2]++;for(const value of array){cov_w9jz6e11u().s[3]++;if(comparator(target,value)){cov_w9jz6e11u().b[1][0]++;cov_w9jz6e11u().s[4]++;return true;}else{cov_w9jz6e11u().b[1][1]++;}}cov_w9jz6e11u().s[5]++;return false;}export default arrayIncludesWith;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcnJheUluY2x1ZGVzV2l0aCIsImFycmF5IiwidGFyZ2V0IiwiY29tcGFyYXRvciIsInZhbHVlIl0sInNvdXJjZXMiOlsiYXJyYXlJbmNsdWRlc1dpdGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXHJcbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxyXG4gKi9cclxuZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHRhcmdldCwgY29tcGFyYXRvcikge1xyXG4gIGlmIChhcnJheSA9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGZvciAoY29uc3QgdmFsdWUgb2YgYXJyYXkpIHtcclxuICAgIGlmIChjb21wYXJhdG9yKHRhcmdldCwgdmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhcnJheUluY2x1ZGVzV2l0aFxyXG4iXSwibWFwcGluZ3MiOiJzL0NBZVk7QUFBQSx5RkFmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQSxrQkFBaUIsQ0FBQ0MsS0FBSyxDQUFFQyxNQUFNLENBQUVDLFVBQVUsQ0FBRSwrQ0FDcEQsR0FBSUYsS0FBSyxFQUFJLElBQUksQ0FBRSxrREFDakIsTUFBTyxNQUFLLENBQ2QsQ0FBQyx1REFFRCxJQUFLLEtBQU1HLE1BQUssR0FBSUgsTUFBSyxDQUFFLHdCQUN6QixHQUFJRSxVQUFVLENBQUNELE1BQU0sQ0FBRUUsS0FBSyxDQUFDLENBQUUsa0RBQzdCLE1BQU8sS0FBSSxDQUNiLENBQUMsZ0NBQ0gsQ0FBQyx1QkFDRCxNQUFPLE1BQUssQ0FDZCxDQUVBLGNBQWVKLGtCQUFpQiJ9