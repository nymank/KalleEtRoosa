function cov_wdcqgsirz(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseSortBy.js";var hash="6e365359bf7deac722bab04d0e13d905b4276877";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseSortBy.js",statementMap:{"0":{start:{line:12,column:19},end:{line:12,column:24}},"1":{start:{line:14,column:2},end:{line:14,column:22}},"2":{start:{line:15,column:2},end:{line:17,column:3}},"3":{start:{line:16,column:4},end:{line:16,column:39}},"4":{start:{line:18,column:2},end:{line:18,column:14}}},fnMap:{"0":{name:"baseSortBy",decl:{start:{line:11,column:9},end:{line:11,column:19}},loc:{start:{line:11,column:37},end:{line:19,column:1}},line:11}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6e365359bf7deac722bab04d0e13d905b4276877"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_wdcqgsirz=function(){return actualCoverage;};}return actualCoverage;}cov_wdcqgsirz();/**
 * The base implementation of `sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */function baseSortBy(array,comparer){cov_wdcqgsirz().f[0]++;let{length}=(cov_wdcqgsirz().s[0]++,array);cov_wdcqgsirz().s[1]++;array.sort(comparer);cov_wdcqgsirz().s[2]++;while(length--){cov_wdcqgsirz().s[3]++;array[length]=array[length].value;}cov_wdcqgsirz().s[4]++;return array;}export default baseSortBy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlU29ydEJ5IiwiYXJyYXkiLCJjb21wYXJlciIsImxlbmd0aCIsInNvcnQiLCJ2YWx1ZSJdLCJzb3VyY2VzIjpbImJhc2VTb3J0QnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXHJcbiAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcclxuICogdmFsdWVzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cclxuICovXHJcbmZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XHJcbiAgbGV0IHsgbGVuZ3RoIH0gPSBhcnJheVxyXG5cclxuICBhcnJheS5zb3J0KGNvbXBhcmVyKVxyXG4gIHdoaWxlIChsZW5ndGgtLSkge1xyXG4gICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWVcclxuICB9XHJcbiAgcmV0dXJuIGFycmF5XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJhc2VTb3J0QnlcclxuIl0sIm1hcHBpbmdzIjoieWhDQWVZO0FBQUEseUZBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQSxXQUFVLENBQUNDLEtBQUssQ0FBRUMsUUFBUSxDQUFFLHdCQUNuQyxHQUFJLENBQUVDLE1BQU8sQ0FBQyx5QkFBR0YsS0FBSyx5QkFFdEJBLEtBQUssQ0FBQ0csSUFBSSxDQUFDRixRQUFRLENBQUMsd0JBQ3BCLE1BQU9DLE1BQU0sRUFBRSxDQUFFLHdCQUNmRixLQUFLLENBQUNFLE1BQU0sQ0FBQyxDQUFHRixLQUFLLENBQUNFLE1BQU0sQ0FBQyxDQUFDRSxLQUFLLENBQ3JDLENBQUMsdUJBQ0QsTUFBT0osTUFBSyxDQUNkLENBRUEsY0FBZUQsV0FBVSJ9