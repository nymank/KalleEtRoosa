function cov_29tvcwlp67(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\composeArgs.js";var hash="9005bf1a7c4b0fb880cf7b72a2f5efd349a90074";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\composeArgs.js",statementMap:{"0":{start:{line:13,column:21},end:{line:13,column:32}},"1":{start:{line:14,column:24},end:{line:14,column:38}},"2":{start:{line:15,column:21},end:{line:15,column:36}},"3":{start:{line:17,column:18},end:{line:17,column:20}},"4":{start:{line:18,column:18},end:{line:18,column:20}},"5":{start:{line:19,column:20},end:{line:19,column:59}},"6":{start:{line:21,column:17},end:{line:21,column:52}},"7":{start:{line:22,column:22},end:{line:22,column:32}},"8":{start:{line:24,column:2},end:{line:26,column:3}},"9":{start:{line:25,column:4},end:{line:25,column:43}},"10":{start:{line:27,column:2},end:{line:31,column:3}},"11":{start:{line:28,column:4},end:{line:30,column:5}},"12":{start:{line:29,column:6},end:{line:29,column:50}},"13":{start:{line:32,column:2},end:{line:34,column:3}},"14":{start:{line:33,column:4},end:{line:33,column:43}},"15":{start:{line:35,column:2},end:{line:35,column:15}}},fnMap:{"0":{name:"composeArgs",decl:{start:{line:12,column:9},end:{line:12,column:20}},loc:{start:{line:12,column:57},end:{line:36,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:28,column:4},end:{line:30,column:5}},type:"if",locations:[{start:{line:28,column:4},end:{line:30,column:5}},{start:{line:28,column:4},end:{line:30,column:5}}],line:28},"1":{loc:{start:{line:28,column:8},end:{line:28,column:45}},type:"binary-expr",locations:[{start:{line:28,column:8},end:{line:28,column:19}},{start:{line:28,column:23},end:{line:28,column:45}}],line:28}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9005bf1a7c4b0fb880cf7b72a2f5efd349a90074"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_29tvcwlp67=function(){return actualCoverage;};}return actualCoverage;}cov_29tvcwlp67();/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */function composeArgs(args,partials,holders,isCurried){cov_29tvcwlp67().f[0]++;const argsLength=(cov_29tvcwlp67().s[0]++,args.length);const holdersLength=(cov_29tvcwlp67().s[1]++,holders.length);const leftLength=(cov_29tvcwlp67().s[2]++,partials.length);let argsIndex=(cov_29tvcwlp67().s[3]++,-1);let leftIndex=(cov_29tvcwlp67().s[4]++,-1);let rangeLength=(cov_29tvcwlp67().s[5]++,Math.max(argsLength-holdersLength,0));const result=(cov_29tvcwlp67().s[6]++,new Array(leftLength+rangeLength));const isUncurried=(cov_29tvcwlp67().s[7]++,!isCurried);cov_29tvcwlp67().s[8]++;while(++leftIndex<leftLength){cov_29tvcwlp67().s[9]++;result[leftIndex]=partials[leftIndex];}cov_29tvcwlp67().s[10]++;while(++argsIndex<holdersLength){cov_29tvcwlp67().s[11]++;if((cov_29tvcwlp67().b[1][0]++,isUncurried)||(cov_29tvcwlp67().b[1][1]++,argsIndex<argsLength)){cov_29tvcwlp67().b[0][0]++;cov_29tvcwlp67().s[12]++;result[holders[argsIndex]]=args[argsIndex];}else{cov_29tvcwlp67().b[0][1]++;}}cov_29tvcwlp67().s[13]++;while(rangeLength--){cov_29tvcwlp67().s[14]++;result[leftIndex++]=args[argsIndex++];}cov_29tvcwlp67().s[15]++;return result;}export default composeArgs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21wb3NlQXJncyIsImFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzTGVuZ3RoIiwibGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRMZW5ndGgiLCJhcmdzSW5kZXgiLCJsZWZ0SW5kZXgiLCJyYW5nZUxlbmd0aCIsIk1hdGgiLCJtYXgiLCJyZXN1bHQiLCJBcnJheSIsImlzVW5jdXJyaWVkIl0sInNvdXJjZXMiOlsiY29tcG9zZUFyZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxyXG4gKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cclxuICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxyXG4gKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXHJcbiAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cclxuICovXHJcbmZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcclxuICBjb25zdCBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGhcclxuICBjb25zdCBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGhcclxuICBjb25zdCBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoXHJcblxyXG4gIGxldCBhcmdzSW5kZXggPSAtMVxyXG4gIGxldCBsZWZ0SW5kZXggPSAtMVxyXG4gIGxldCByYW5nZUxlbmd0aCA9IE1hdGgubWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKVxyXG5cclxuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKVxyXG4gIGNvbnN0IGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZFxyXG5cclxuICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XHJcbiAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF1cclxuICB9XHJcbiAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xyXG4gICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcclxuICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF1cclxuICAgIH1cclxuICB9XHJcbiAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcclxuICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXVxyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2VBcmdzXHJcbiJdLCJtYXBwaW5ncyI6InVtRUFlWTtBQUFBLDJGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQSxZQUFXLENBQUNDLElBQUksQ0FBRUMsUUFBUSxDQUFFQyxPQUFPLENBQUVDLFNBQVMsQ0FBRSx5QkFDdkQsS0FBTUMsV0FBVSwwQkFBR0osSUFBSSxDQUFDSyxNQUFNLEVBQzlCLEtBQU1DLGNBQWEsMEJBQUdKLE9BQU8sQ0FBQ0csTUFBTSxFQUNwQyxLQUFNRSxXQUFVLDBCQUFHTixRQUFRLENBQUNJLE1BQU0sRUFFbEMsR0FBSUcsVUFBUywwQkFBRyxDQUFDLENBQUMsRUFDbEIsR0FBSUMsVUFBUywwQkFBRyxDQUFDLENBQUMsRUFDbEIsR0FBSUMsWUFBVywwQkFBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUNSLFVBQVUsQ0FBR0UsYUFBYSxDQUFFLENBQUMsQ0FBQyxFQUV6RCxLQUFNTyxPQUFNLDBCQUFHLEdBQUlDLE1BQUssQ0FBQ1AsVUFBVSxDQUFHRyxXQUFXLENBQUMsRUFDbEQsS0FBTUssWUFBVywwQkFBRyxDQUFDWixTQUFTLDBCQUU5QixNQUFPLEVBQUVNLFNBQVMsQ0FBR0YsVUFBVSxDQUFFLHlCQUMvQk0sTUFBTSxDQUFDSixTQUFTLENBQUMsQ0FBR1IsUUFBUSxDQUFDUSxTQUFTLENBQUMsQ0FDekMsQ0FBQyx5QkFDRCxNQUFPLEVBQUVELFNBQVMsQ0FBR0YsYUFBYSxDQUFFLDBCQUNsQyxHQUFJLDRCQUFBUyxXQUFXLCtCQUFJUCxTQUFTLENBQUdKLFVBQVUsRUFBRSxxREFDekNTLE1BQU0sQ0FBQ1gsT0FBTyxDQUFDTSxTQUFTLENBQUMsQ0FBQyxDQUFHUixJQUFJLENBQUNRLFNBQVMsQ0FBQyxDQUM5QyxDQUFDLGlDQUNILENBQUMseUJBQ0QsTUFBT0UsV0FBVyxFQUFFLENBQUUsMEJBQ3BCRyxNQUFNLENBQUNKLFNBQVMsRUFBRSxDQUFDLENBQUdULElBQUksQ0FBQ1EsU0FBUyxFQUFFLENBQUMsQ0FDekMsQ0FBQyx5QkFDRCxNQUFPSyxPQUFNLENBQ2YsQ0FFQSxjQUFlZCxZQUFXIn0=