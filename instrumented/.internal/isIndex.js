function cov_k0lpvr0h3(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\isIndex.js";var hash="7a2226f9d786be26b18663de17351b37401fbe1c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\isIndex.js",statementMap:{"0":{start:{line:2,column:25},end:{line:2,column:41}},"1":{start:{line:5,column:17},end:{line:5,column:35}},"2":{start:{line:16,column:15},end:{line:16,column:27}},"3":{start:{line:17,column:2},end:{line:17,column:53}},"4":{start:{line:19,column:2},end:{line:22,column:56}}},fnMap:{"0":{name:"isIndex",decl:{start:{line:15,column:9},end:{line:15,column:16}},loc:{start:{line:15,column:32},end:{line:23,column:1}},line:15}},branchMap:{"0":{loc:{start:{line:17,column:11},end:{line:17,column:53}},type:"cond-expr",locations:[{start:{line:17,column:28},end:{line:17,column:44}},{start:{line:17,column:47},end:{line:17,column:53}}],line:17},"1":{loc:{start:{line:19,column:9},end:{line:22,column:56}},type:"binary-expr",locations:[{start:{line:19,column:9},end:{line:19,column:17}},{start:{line:20,column:5},end:{line:20,column:22}},{start:{line:21,column:7},end:{line:21,column:24}},{start:{line:21,column:28},end:{line:21,column:48}},{start:{line:22,column:9},end:{line:22,column:19}},{start:{line:22,column:23},end:{line:22,column:37}},{start:{line:22,column:41},end:{line:22,column:55}}],line:19}},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0},b:{"0":[0,0],"1":[0,0,0,0,0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7a2226f9d786be26b18663de17351b37401fbe1c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_k0lpvr0h3=function(){return actualCoverage;};}return actualCoverage;}cov_k0lpvr0h3();/** Used as references for various `Number` constants. */const MAX_SAFE_INTEGER=(cov_k0lpvr0h3().s[0]++,9007199254740991);/** Used to detect unsigned integer values. */const reIsUint=(cov_k0lpvr0h3().s[1]++,/^(?:0|[1-9]\d*)$/);/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */function isIndex(value,length){cov_k0lpvr0h3().f[0]++;const type=(cov_k0lpvr0h3().s[2]++,typeof value);cov_k0lpvr0h3().s[3]++;length=length==null?(cov_k0lpvr0h3().b[0][0]++,MAX_SAFE_INTEGER):(cov_k0lpvr0h3().b[0][1]++,length);cov_k0lpvr0h3().s[4]++;return(cov_k0lpvr0h3().b[1][0]++,!!length)&&((cov_k0lpvr0h3().b[1][1]++,type==='number')||(cov_k0lpvr0h3().b[1][2]++,type!=='symbol')&&(cov_k0lpvr0h3().b[1][3]++,reIsUint.test(value)))&&(cov_k0lpvr0h3().b[1][4]++,value>-1)&&(cov_k0lpvr0h3().b[1][5]++,value%1==0)&&(cov_k0lpvr0h3().b[1][6]++,value<length);}export default isIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQVhfU0FGRV9JTlRFR0VSIiwicmVJc1VpbnQiLCJpc0luZGV4IiwidmFsdWUiLCJsZW5ndGgiLCJ0eXBlIiwidGVzdCJdLCJzb3VyY2VzIjpbImlzSW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXHJcbmNvbnN0IE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxXHJcblxyXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXHJcbmNvbnN0IHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkL1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XHJcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZVxyXG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aFxyXG5cclxuICByZXR1cm4gISFsZW5ndGggJiZcclxuICAgICh0eXBlID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAodHlwZSAhPT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxyXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpc0luZGV4XHJcbiJdLCJtYXBwaW5ncyI6ImtzREFlWTtBQUFBLHlGQWZaLHlEQUNBLEtBQU1BLGlCQUFnQix5QkFBRyxnQkFBZ0IsRUFFekMsOENBQ0EsS0FBTUMsU0FBUSx5QkFBRyxrQkFBa0IsRUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLFFBQU8sQ0FBQ0MsS0FBSyxDQUFFQyxNQUFNLENBQUUsd0JBQzlCLEtBQU1DLEtBQUkseUJBQUcsTUFBT0YsTUFBSyx5QkFDekJDLE1BQU0sQ0FBR0EsTUFBTSxFQUFJLElBQUksNEJBQUdKLGdCQUFnQiw2QkFBR0ksTUFBTSx5QkFFbkQsTUFBTyw0QkFBQyxDQUFDQSxNQUFNLElBQ1osMkJBQUFDLElBQUksR0FBSyxRQUFRLEdBQ2YsMkJBQUFBLElBQUksR0FBSyxRQUFRLDhCQUFJSixRQUFRLENBQUNLLElBQUksQ0FBQ0gsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUN6QywyQkFBQUEsS0FBSyxDQUFHLENBQUMsQ0FBQyw4QkFBSUEsS0FBSyxDQUFHLENBQUMsRUFBSSxDQUFDLDhCQUFJQSxLQUFLLENBQUdDLE1BQU0sQ0FBQyxDQUN4RCxDQUVBLGNBQWVGLFFBQU8ifQ==