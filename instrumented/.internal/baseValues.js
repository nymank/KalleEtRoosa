function cov_r3ll2s8w8(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseValues.js";var hash="8f1a401b5f2b40c1ea1518edceae41a629521e40";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseValues.js",statementMap:{"0":{start:{line:12,column:2},end:{line:12,column:61}},"1":{start:{line:12,column:49},end:{line:12,column:60}}},fnMap:{"0":{name:"baseValues",decl:{start:{line:11,column:9},end:{line:11,column:19}},loc:{start:{line:11,column:35},end:{line:13,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:40},end:{line:12,column:41}},loc:{start:{line:12,column:49},end:{line:12,column:60}},line:12}},branchMap:{"0":{loc:{start:{line:12,column:9},end:{line:12,column:61}},type:"cond-expr",locations:[{start:{line:12,column:25},end:{line:12,column:27}},{start:{line:12,column:30},end:{line:12,column:61}}],line:12}},s:{"0":0,"1":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8f1a401b5f2b40c1ea1518edceae41a629521e40"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_r3ll2s8w8=function(){return actualCoverage;};}return actualCoverage;}cov_r3ll2s8w8();/**
 * The base implementation of `values` and `valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */function baseValues(object,props){cov_r3ll2s8w8().f[0]++;cov_r3ll2s8w8().s[0]++;return props==null?(cov_r3ll2s8w8().b[0][0]++,[]):(cov_r3ll2s8w8().b[0][1]++,props.map(key=>{cov_r3ll2s8w8().f[1]++;cov_r3ll2s8w8().s[1]++;return object[key];}));}export default baseValues;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlVmFsdWVzIiwib2JqZWN0IiwicHJvcHMiLCJtYXAiLCJrZXkiXSwic291cmNlcyI6WyJiYXNlVmFsdWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgdmFsdWVzYCBhbmQgYHZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXHJcbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xyXG4gKiBvZiBgcHJvcHNgLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cclxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxyXG4gKi9cclxuZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XHJcbiAgcmV0dXJuIHByb3BzID09IG51bGwgPyBbXSA6IHByb3BzLm1hcCgoa2V5KSA9PiBvYmplY3Rba2V5XSlcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZVZhbHVlc1xyXG4iXSwibWFwcGluZ3MiOiIrc0NBZVk7QUFBQSx5RkFmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNBLFdBQVUsQ0FBQ0MsTUFBTSxDQUFFQyxLQUFLLENBQUUsK0NBQ2pDLE1BQU9BLE1BQUssRUFBSSxJQUFJLDRCQUFHLEVBQUUsNkJBQUdBLEtBQUssQ0FBQ0MsR0FBRyxDQUFFQyxHQUFHLEVBQUsscURBQUFILE9BQU0sQ0FBQ0csR0FBRyxDQUFDLENBQUQsQ0FBQyxDQUFDLEVBQzdELENBRUEsY0FBZUosV0FBVSJ9