function cov_gj8j3bf3v(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\isIterateeCall.js";var hash="57ea82320035ed03a895efc1e4f6290c9ff54061";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\isIterateeCall.js",statementMap:{"0":{start:{line:18,column:2},end:{line:20,column:3}},"1":{start:{line:19,column:4},end:{line:19,column:16}},"2":{start:{line:21,column:15},end:{line:21,column:27}},"3":{start:{line:22,column:2},end:{line:27,column:3}},"4":{start:{line:26,column:4},end:{line:26,column:35}},"5":{start:{line:28,column:2},end:{line:28,column:14}}},fnMap:{"0":{name:"isIterateeCall",decl:{start:{line:17,column:9},end:{line:17,column:23}},loc:{start:{line:17,column:46},end:{line:29,column:1}},line:17}},branchMap:{"0":{loc:{start:{line:18,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:18,column:2},end:{line:20,column:3}},{start:{line:18,column:2},end:{line:20,column:3}}],line:18},"1":{loc:{start:{line:22,column:2},end:{line:27,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:27,column:3}},{start:{line:22,column:2},end:{line:27,column:3}}],line:22},"2":{loc:{start:{line:22,column:6},end:{line:24,column:44}},type:"cond-expr",locations:[{start:{line:23,column:7},end:{line:23,column:59}},{start:{line:24,column:7},end:{line:24,column:43}}],line:22},"3":{loc:{start:{line:23,column:7},end:{line:23,column:59}},type:"binary-expr",locations:[{start:{line:23,column:7},end:{line:23,column:26}},{start:{line:23,column:30},end:{line:23,column:59}}],line:23},"4":{loc:{start:{line:24,column:7},end:{line:24,column:43}},type:"binary-expr",locations:[{start:{line:24,column:7},end:{line:24,column:24}},{start:{line:24,column:28},end:{line:24,column:43}}],line:24}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"57ea82320035ed03a895efc1e4f6290c9ff54061"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_gj8j3bf3v=function(){return actualCoverage;};}return actualCoverage;}cov_gj8j3bf3v();import isArrayLike from'../isArrayLike.js';import isIndex from'./isIndex.js';import isObject from'../isObject.js';import eq from'../eq.js';/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */function isIterateeCall(value,index,object){cov_gj8j3bf3v().f[0]++;cov_gj8j3bf3v().s[0]++;if(!isObject(object)){cov_gj8j3bf3v().b[0][0]++;cov_gj8j3bf3v().s[1]++;return false;}else{cov_gj8j3bf3v().b[0][1]++;}const type=(cov_gj8j3bf3v().s[2]++,typeof index);cov_gj8j3bf3v().s[3]++;if(type==='number'?(cov_gj8j3bf3v().b[2][0]++,(cov_gj8j3bf3v().b[3][0]++,isArrayLike(object))&&(cov_gj8j3bf3v().b[3][1]++,isIndex(index,object.length))):(cov_gj8j3bf3v().b[2][1]++,(cov_gj8j3bf3v().b[4][0]++,type==='string')&&(cov_gj8j3bf3v().b[4][1]++,index in object))){cov_gj8j3bf3v().b[1][0]++;cov_gj8j3bf3v().s[4]++;return eq(object[index],value);}else{cov_gj8j3bf3v().b[1][1]++;}cov_gj8j3bf3v().s[5]++;return false;}export default isIterateeCall;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0FycmF5TGlrZSIsImlzSW5kZXgiLCJpc09iamVjdCIsImVxIiwiaXNJdGVyYXRlZUNhbGwiLCJ2YWx1ZSIsImluZGV4Iiwib2JqZWN0IiwidHlwZSIsImxlbmd0aCJdLCJzb3VyY2VzIjpbImlzSXRlcmF0ZWVDYWxsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuLi9pc0FycmF5TGlrZS5qcydcclxuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9pc0luZGV4LmpzJ1xyXG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi4vaXNPYmplY3QuanMnXHJcbmltcG9ydCBlcSBmcm9tICcuLi9lcS5qcydcclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXHJcbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxyXG4gKiAgZWxzZSBgZmFsc2VgLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XHJcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiBpbmRleFxyXG4gIGlmICh0eXBlID09PSAnbnVtYmVyJ1xyXG4gICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcclxuICAgIDogKHR5cGUgPT09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcclxuICApIHtcclxuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSlcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGlzSXRlcmF0ZWVDYWxsXHJcbiJdLCJtYXBwaW5ncyI6IjJtRUFlWTtBQUFBLHlGQWZaLE1BQU9BLFlBQVcsS0FBTSxtQkFBbUIsQ0FDM0MsTUFBT0MsUUFBTyxLQUFNLGNBQWMsQ0FDbEMsTUFBT0MsU0FBUSxLQUFNLGdCQUFnQixDQUNyQyxNQUFPQyxHQUFFLEtBQU0sVUFBVSxDQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUVBLFFBQVNDLGVBQWMsQ0FBQ0MsS0FBSyxDQUFFQyxLQUFLLENBQUVDLE1BQU0sQ0FBRSwrQ0FDNUMsR0FBSSxDQUFDTCxRQUFRLENBQUNLLE1BQU0sQ0FBQyxDQUFFLGtEQUNyQixNQUFPLE1BQUssQ0FDZCxDQUFDLGdDQUNELEtBQU1DLEtBQUkseUJBQUcsTUFBT0YsTUFBSyx5QkFDekIsR0FBSUUsSUFBSSxHQUFLLFFBQVEsNEJBQ2hCLDJCQUFBUixXQUFXLENBQUNPLE1BQU0sQ0FBQyw4QkFBSU4sT0FBTyxDQUFDSyxLQUFLLENBQUVDLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLDhCQUNwRCwyQkFBQUQsSUFBSSxHQUFLLFFBQVEsOEJBQUlGLEtBQUssR0FBSUMsT0FBTSxFQUFDLENBQ3hDLGtEQUNBLE1BQU9KLEdBQUUsQ0FBQ0ksTUFBTSxDQUFDRCxLQUFLLENBQUMsQ0FBRUQsS0FBSyxDQUFDLENBQ2pDLENBQUMsdURBQ0QsTUFBTyxNQUFLLENBQ2QsQ0FFQSxjQUFlRCxlQUFjIn0=