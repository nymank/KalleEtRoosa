function cov_9kgpkmxix(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\assocIndexOf.js";var hash="1200c968a13928a3bffe9e379ae77654818b9734";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\assocIndexOf.js",statementMap:{"0":{start:{line:12,column:19},end:{line:12,column:24}},"1":{start:{line:13,column:2},end:{line:17,column:3}},"2":{start:{line:14,column:4},end:{line:16,column:5}},"3":{start:{line:15,column:6},end:{line:15,column:19}},"4":{start:{line:18,column:2},end:{line:18,column:11}}},fnMap:{"0":{name:"assocIndexOf",decl:{start:{line:11,column:9},end:{line:11,column:21}},loc:{start:{line:11,column:34},end:{line:19,column:1}},line:11}},branchMap:{"0":{loc:{start:{line:14,column:4},end:{line:16,column:5}},type:"if",locations:[{start:{line:14,column:4},end:{line:16,column:5}},{start:{line:14,column:4},end:{line:16,column:5}}],line:14}},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1200c968a13928a3bffe9e379ae77654818b9734"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_9kgpkmxix=function(){return actualCoverage;};}return actualCoverage;}cov_9kgpkmxix();import eq from'../eq.js';/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */function assocIndexOf(array,key){cov_9kgpkmxix().f[0]++;let{length}=(cov_9kgpkmxix().s[0]++,array);cov_9kgpkmxix().s[1]++;while(length--){cov_9kgpkmxix().s[2]++;if(eq(array[length][0],key)){cov_9kgpkmxix().b[0][0]++;cov_9kgpkmxix().s[3]++;return length;}else{cov_9kgpkmxix().b[0][1]++;}}cov_9kgpkmxix().s[4]++;return-1;}export default assocIndexOf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlcSIsImFzc29jSW5kZXhPZiIsImFycmF5Iiwia2V5IiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiYXNzb2NJbmRleE9mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlcSBmcm9tICcuLi9lcS5qcydcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxyXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xyXG4gIGxldCB7IGxlbmd0aCB9ID0gYXJyYXlcclxuICB3aGlsZSAobGVuZ3RoLS0pIHtcclxuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XHJcbiAgICAgIHJldHVybiBsZW5ndGhcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIC0xXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZlxyXG4iXSwibWFwcGluZ3MiOiJvdUNBZVk7QUFBQSx5RkFmWixNQUFPQSxHQUFFLEtBQU0sVUFBVSxDQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0MsYUFBWSxDQUFDQyxLQUFLLENBQUVDLEdBQUcsQ0FBRSx3QkFDaEMsR0FBSSxDQUFFQyxNQUFPLENBQUMseUJBQUdGLEtBQUsseUJBQ3RCLE1BQU9FLE1BQU0sRUFBRSxDQUFFLHdCQUNmLEdBQUlKLEVBQUUsQ0FBQ0UsS0FBSyxDQUFDRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRUQsR0FBRyxDQUFDLENBQUUsa0RBQzdCLE1BQU9DLE9BQU0sQ0FDZixDQUFDLGdDQUNILENBQUMsdUJBQ0QsTUFBTyxDQUFDLENBQUMsQ0FDWCxDQUVBLGNBQWVILGFBQVkifQ==