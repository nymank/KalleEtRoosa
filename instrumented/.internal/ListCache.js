function cov_19eh98apbd(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\ListCache.js";var hash="d8adc86f6bcf823c2051a8772f6988e9d9c8af4f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\ListCache.js",statementMap:{"0":{start:{line:13,column:16},end:{line:13,column:18}},"1":{start:{line:14,column:19},end:{line:14,column:55}},"2":{start:{line:16,column:4},end:{line:16,column:16}},"3":{start:{line:17,column:4},end:{line:20,column:5}},"4":{start:{line:18,column:20},end:{line:18,column:34}},"5":{start:{line:19,column:6},end:{line:19,column:34}},"6":{start:{line:29,column:4},end:{line:29,column:22}},"7":{start:{line:30,column:4},end:{line:30,column:17}},"8":{start:{line:41,column:17},end:{line:41,column:30}},"9":{start:{line:42,column:18},end:{line:42,column:41}},"10":{start:{line:44,column:4},end:{line:46,column:5}},"11":{start:{line:45,column:6},end:{line:45,column:18}},"12":{start:{line:47,column:22},end:{line:47,column:37}},"13":{start:{line:48,column:4},end:{line:52,column:5}},"14":{start:{line:49,column:6},end:{line:49,column:16}},"15":{start:{line:51,column:6},end:{line:51,column:27}},"16":{start:{line:53,column:4},end:{line:53,column:15}},"17":{start:{line:54,column:4},end:{line:54,column:15}},"18":{start:{line:65,column:17},end:{line:65,column:30}},"19":{start:{line:66,column:18},end:{line:66,column:41}},"20":{start:{line:67,column:4},end:{line:67,column:49}},"21":{start:{line:78,column:4},end:{line:78,column:48}},"22":{start:{line:90,column:17},end:{line:90,column:30}},"23":{start:{line:91,column:18},end:{line:91,column:41}},"24":{start:{line:93,column:4},end:{line:98,column:5}},"25":{start:{line:94,column:6},end:{line:94,column:17}},"26":{start:{line:95,column:6},end:{line:95,column:29}},"27":{start:{line:97,column:6},end:{line:97,column:28}},"28":{start:{line:99,column:4},end:{line:99,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:2},end:{line:12,column:3}},loc:{start:{line:12,column:23},end:{line:21,column:3}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:10},end:{line:31,column:3}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:40,column:2},end:{line:40,column:3}},loc:{start:{line:40,column:14},end:{line:55,column:3}},line:40},"3":{name:"(anonymous_3)",decl:{start:{line:64,column:2},end:{line:64,column:3}},loc:{start:{line:64,column:11},end:{line:68,column:3}},line:64},"4":{name:"(anonymous_4)",decl:{start:{line:77,column:2},end:{line:77,column:3}},loc:{start:{line:77,column:11},end:{line:79,column:3}},line:77},"5":{name:"(anonymous_5)",decl:{start:{line:89,column:2},end:{line:89,column:3}},loc:{start:{line:89,column:18},end:{line:100,column:3}},line:89}},branchMap:{"0":{loc:{start:{line:14,column:19},end:{line:14,column:55}},type:"cond-expr",locations:[{start:{line:14,column:37},end:{line:14,column:38}},{start:{line:14,column:41},end:{line:14,column:55}}],line:14},"1":{loc:{start:{line:44,column:4},end:{line:46,column:5}},type:"if",locations:[{start:{line:44,column:4},end:{line:46,column:5}},{start:{line:44,column:4},end:{line:46,column:5}}],line:44},"2":{loc:{start:{line:48,column:4},end:{line:52,column:5}},type:"if",locations:[{start:{line:48,column:4},end:{line:52,column:5}},{start:{line:48,column:4},end:{line:52,column:5}}],line:48},"3":{loc:{start:{line:67,column:11},end:{line:67,column:49}},type:"cond-expr",locations:[{start:{line:67,column:23},end:{line:67,column:32}},{start:{line:67,column:35},end:{line:67,column:49}}],line:67},"4":{loc:{start:{line:93,column:4},end:{line:98,column:5}},type:"if",locations:[{start:{line:93,column:4},end:{line:98,column:5}},{start:{line:93,column:4},end:{line:98,column:5}}],line:93}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d8adc86f6bcf823c2051a8772f6988e9d9c8af4f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_19eh98apbd=function(){return actualCoverage;};}return actualCoverage;}cov_19eh98apbd();import assocIndexOf from'./assocIndexOf.js';class ListCache{/**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */constructor(entries){cov_19eh98apbd().f[0]++;let index=(cov_19eh98apbd().s[0]++,-1);const length=(cov_19eh98apbd().s[1]++,entries==null?(cov_19eh98apbd().b[0][0]++,0):(cov_19eh98apbd().b[0][1]++,entries.length));cov_19eh98apbd().s[2]++;this.clear();cov_19eh98apbd().s[3]++;while(++index<length){const entry=(cov_19eh98apbd().s[4]++,entries[index]);cov_19eh98apbd().s[5]++;this.set(entry[0],entry[1]);}}/**
   * Removes all key-value entries from the list cache.
   *
   * @memberOf ListCache
   */clear(){cov_19eh98apbd().f[1]++;cov_19eh98apbd().s[6]++;this.__data__=[];cov_19eh98apbd().s[7]++;this.size=0;}/**
   * Removes `key` and its value from the list cache.
   *
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */delete(key){cov_19eh98apbd().f[2]++;const data=(cov_19eh98apbd().s[8]++,this.__data__);const index=(cov_19eh98apbd().s[9]++,assocIndexOf(data,key));cov_19eh98apbd().s[10]++;if(index<0){cov_19eh98apbd().b[1][0]++;cov_19eh98apbd().s[11]++;return false;}else{cov_19eh98apbd().b[1][1]++;}const lastIndex=(cov_19eh98apbd().s[12]++,data.length-1);cov_19eh98apbd().s[13]++;if(index==lastIndex){cov_19eh98apbd().b[2][0]++;cov_19eh98apbd().s[14]++;data.pop();}else{cov_19eh98apbd().b[2][1]++;cov_19eh98apbd().s[15]++;data.splice(index,1);}cov_19eh98apbd().s[16]++;--this.size;cov_19eh98apbd().s[17]++;return true;}/**
   * Gets the list cache value for `key`.
   *
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */get(key){cov_19eh98apbd().f[3]++;const data=(cov_19eh98apbd().s[18]++,this.__data__);const index=(cov_19eh98apbd().s[19]++,assocIndexOf(data,key));cov_19eh98apbd().s[20]++;return index<0?(cov_19eh98apbd().b[3][0]++,undefined):(cov_19eh98apbd().b[3][1]++,data[index][1]);}/**
   * Checks if a list cache value for `key` exists.
   *
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */has(key){cov_19eh98apbd().f[4]++;cov_19eh98apbd().s[21]++;return assocIndexOf(this.__data__,key)>-1;}/**
   * Sets the list cache `key` to `value`.
   *
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */set(key,value){cov_19eh98apbd().f[5]++;const data=(cov_19eh98apbd().s[22]++,this.__data__);const index=(cov_19eh98apbd().s[23]++,assocIndexOf(data,key));cov_19eh98apbd().s[24]++;if(index<0){cov_19eh98apbd().b[4][0]++;cov_19eh98apbd().s[25]++;++this.size;cov_19eh98apbd().s[26]++;data.push([key,value]);}else{cov_19eh98apbd().b[4][1]++;cov_19eh98apbd().s[27]++;data[index][1]=value;}cov_19eh98apbd().s[28]++;return this;}}export default ListCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NvY0luZGV4T2YiLCJMaXN0Q2FjaGUiLCJjb25zdHJ1Y3RvciIsImVudHJpZXMiLCJpbmRleCIsImxlbmd0aCIsImNsZWFyIiwiZW50cnkiLCJzZXQiLCJfX2RhdGFfXyIsInNpemUiLCJkZWxldGUiLCJrZXkiLCJkYXRhIiwibGFzdEluZGV4IiwicG9wIiwic3BsaWNlIiwiZ2V0IiwidW5kZWZpbmVkIiwiaGFzIiwidmFsdWUiLCJwdXNoIl0sInNvdXJjZXMiOlsiTGlzdENhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9hc3NvY0luZGV4T2YuanMnXHJcblxyXG5jbGFzcyBMaXN0Q2FjaGUge1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQHByaXZhdGVcclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihlbnRyaWVzKSB7XHJcbiAgICBsZXQgaW5kZXggPSAtMVxyXG4gICAgY29uc3QgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoXHJcblxyXG4gICAgdGhpcy5jbGVhcigpXHJcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xyXG4gICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbaW5kZXhdXHJcbiAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXHJcbiAgICpcclxuICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXHJcbiAgICovXHJcbiAgY2xlYXIoKSB7XHJcbiAgICB0aGlzLl9fZGF0YV9fID0gW11cclxuICAgIHRoaXMuc2l6ZSA9IDBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxyXG4gICAqXHJcbiAgICogQG1lbWJlck9mIExpc3RDYWNoZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cclxuICAgKi9cclxuICBkZWxldGUoa2V5KSB7XHJcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fX2RhdGFfX1xyXG4gICAgY29uc3QgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KVxyXG5cclxuICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgICBjb25zdCBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDFcclxuICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcclxuICAgICAgZGF0YS5wb3AoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGF0YS5zcGxpY2UoaW5kZXgsIDEpXHJcbiAgICB9XHJcbiAgICAtLXRoaXMuc2l6ZVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxyXG4gICAqXHJcbiAgICogQG1lbWJlck9mIExpc3RDYWNoZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxyXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cclxuICAgKi9cclxuICBnZXQoa2V5KSB7XHJcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fX2RhdGFfX1xyXG4gICAgY29uc3QgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KVxyXG4gICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXHJcbiAgICpcclxuICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxyXG4gICAqL1xyXG4gIGhhcyhrZXkpIHtcclxuICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXHJcbiAgICpcclxuICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXHJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxyXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXHJcbiAgICovXHJcbiAgc2V0KGtleSwgdmFsdWUpIHtcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9fZGF0YV9fXHJcbiAgICBjb25zdCBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpXHJcblxyXG4gICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICArK3RoaXMuc2l6ZVxyXG4gICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZVxyXG4iXSwibWFwcGluZ3MiOiJrdklBZVk7QUFBQSwyRkFmWixNQUFPQSxhQUFZLEtBQU0sbUJBQW1CLENBRTVDLEtBQU1DLFVBQVUsQ0FFZDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUNFQyxXQUFXLENBQUNDLE9BQU8sQ0FBRSx5QkFDbkIsR0FBSUMsTUFBSywwQkFBRyxDQUFDLENBQUMsRUFDZCxLQUFNQyxPQUFNLDBCQUFHRixPQUFPLEVBQUksSUFBSSw2QkFBRyxDQUFDLDhCQUFHQSxPQUFPLENBQUNFLE1BQU0sMkJBRW5ELElBQUksQ0FBQ0MsS0FBSyxFQUFFLHlCQUNaLE1BQU8sRUFBRUYsS0FBSyxDQUFHQyxNQUFNLENBQUUsQ0FDdkIsS0FBTUUsTUFBSywwQkFBR0osT0FBTyxDQUFDQyxLQUFLLENBQUMsMEJBQzVCLElBQUksQ0FBQ0ksR0FBRyxDQUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUVBLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM5QixDQUNGLENBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQSxLQUNFRCxLQUFLLEVBQUcsaURBQ04sSUFBSSxDQUFDRyxRQUFRLENBQUcsRUFBRSx5QkFDbEIsSUFBSSxDQUFDQyxJQUFJLENBQUcsQ0FBQyxDQUNmLENBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FDRUMsTUFBTSxDQUFDQyxHQUFHLENBQUUseUJBQ1YsS0FBTUMsS0FBSSwwQkFBRyxJQUFJLENBQUNKLFFBQVEsRUFDMUIsS0FBTUwsTUFBSywwQkFBR0osWUFBWSxDQUFDYSxJQUFJLENBQUVELEdBQUcsQ0FBQywyQkFFckMsR0FBSVIsS0FBSyxDQUFHLENBQUMsQ0FBRSxxREFDYixNQUFPLE1BQUssQ0FDZCxDQUFDLGlDQUNELEtBQU1VLFVBQVMsMkJBQUdELElBQUksQ0FBQ1IsTUFBTSxDQUFHLENBQUMsMkJBQ2pDLEdBQUlELEtBQUssRUFBSVUsU0FBUyxDQUFFLHFEQUN0QkQsSUFBSSxDQUFDRSxHQUFHLEVBQUUsQ0FDWixDQUFDLElBQU0scURBQ0xGLElBQUksQ0FBQ0csTUFBTSxDQUFDWixLQUFLLENBQUUsQ0FBQyxDQUFDLENBQ3ZCLENBQUMseUJBQ0QsRUFBRSxJQUFJLENBQUNNLElBQUksMEJBQ1gsTUFBTyxLQUFJLENBQ2IsQ0FFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUNFTyxHQUFHLENBQUNMLEdBQUcsQ0FBRSx5QkFDUCxLQUFNQyxLQUFJLDJCQUFHLElBQUksQ0FBQ0osUUFBUSxFQUMxQixLQUFNTCxNQUFLLDJCQUFHSixZQUFZLENBQUNhLElBQUksQ0FBRUQsR0FBRyxDQUFDLDJCQUNyQyxNQUFPUixNQUFLLENBQUcsQ0FBQyw2QkFBR2MsU0FBUyw4QkFBR0wsSUFBSSxDQUFDVCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDL0MsQ0FFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUNFZSxHQUFHLENBQUNQLEdBQUcsQ0FBRSxrREFDUCxNQUFPWixhQUFZLENBQUMsSUFBSSxDQUFDUyxRQUFRLENBQUVHLEdBQUcsQ0FBQyxDQUFHLENBQUMsQ0FBQyxDQUM5QyxDQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FDRUosR0FBRyxDQUFDSSxHQUFHLENBQUVRLEtBQUssQ0FBRSx5QkFDZCxLQUFNUCxLQUFJLDJCQUFHLElBQUksQ0FBQ0osUUFBUSxFQUMxQixLQUFNTCxNQUFLLDJCQUFHSixZQUFZLENBQUNhLElBQUksQ0FBRUQsR0FBRyxDQUFDLDJCQUVyQyxHQUFJUixLQUFLLENBQUcsQ0FBQyxDQUFFLHFEQUNiLEVBQUUsSUFBSSxDQUFDTSxJQUFJLDBCQUNYRyxJQUFJLENBQUNRLElBQUksQ0FBQyxDQUFDVCxHQUFHLENBQUVRLEtBQUssQ0FBQyxDQUFDLENBQ3pCLENBQUMsSUFBTSxxREFDTFAsSUFBSSxDQUFDVCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBR2dCLEtBQUssQ0FDeEIsQ0FBQyx5QkFDRCxNQUFPLEtBQUksQ0FDYixDQUNGLENBRUEsY0FBZW5CLFVBQVMifQ==