function cov_i1s2nc9rm(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseMerge.js";var hash="f42bf13fd2f8362fa90ea5b5b83eefe2c9a2e993";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseMerge.js",statementMap:{"0":{start:{line:20,column:2},end:{line:22,column:3}},"1":{start:{line:21,column:4},end:{line:21,column:10}},"2":{start:{line:23,column:2},end:{line:38,column:12}},"3":{start:{line:24,column:4},end:{line:37,column:5}},"4":{start:{line:25,column:6},end:{line:25,column:34}},"5":{start:{line:26,column:6},end:{line:26,column:80}},"6":{start:{line:29,column:21},end:{line:31,column:19}},"7":{start:{line:33,column:6},end:{line:35,column:7}},"8":{start:{line:34,column:8},end:{line:34,column:27}},"9":{start:{line:36,column:6},end:{line:36,column:45}}},fnMap:{"0":{name:"baseMerge",decl:{start:{line:19,column:9},end:{line:19,column:18}},loc:{start:{line:19,column:64},end:{line:39,column:1}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:23,column:18},end:{line:23,column:19}},loc:{start:{line:23,column:37},end:{line:38,column:3}},line:23}},branchMap:{"0":{loc:{start:{line:20,column:2},end:{line:22,column:3}},type:"if",locations:[{start:{line:20,column:2},end:{line:22,column:3}},{start:{line:20,column:2},end:{line:22,column:3}}],line:20},"1":{loc:{start:{line:24,column:4},end:{line:37,column:5}},type:"if",locations:[{start:{line:24,column:4},end:{line:37,column:5}},{start:{line:24,column:4},end:{line:37,column:5}}],line:24},"2":{loc:{start:{line:25,column:6},end:{line:25,column:34}},type:"binary-expr",locations:[{start:{line:25,column:6},end:{line:25,column:11}},{start:{line:25,column:16},end:{line:25,column:33}}],line:25},"3":{loc:{start:{line:29,column:21},end:{line:31,column:19}},type:"cond-expr",locations:[{start:{line:30,column:10},end:{line:30,column:76}},{start:{line:31,column:10},end:{line:31,column:19}}],line:29},"4":{loc:{start:{line:33,column:6},end:{line:35,column:7}},type:"if",locations:[{start:{line:33,column:6},end:{line:35,column:7}},{start:{line:33,column:6},end:{line:35,column:7}}],line:33}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f42bf13fd2f8362fa90ea5b5b83eefe2c9a2e993"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_i1s2nc9rm=function(){return actualCoverage;};}return actualCoverage;}cov_i1s2nc9rm();import Stack from'./Stack.js';import assignMergeValue from'./assignMergeValue.js';import baseFor from'./baseFor.js';import baseMergeDeep from'./baseMergeDeep.js';import isObject from'../isObject.js';import keysIn from'../keysIn.js';/**
 * The base implementation of `merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */function baseMerge(object,source,srcIndex,customizer,stack){cov_i1s2nc9rm().f[0]++;cov_i1s2nc9rm().s[0]++;if(object===source){cov_i1s2nc9rm().b[0][0]++;cov_i1s2nc9rm().s[1]++;return;}else{cov_i1s2nc9rm().b[0][1]++;}cov_i1s2nc9rm().s[2]++;baseFor(source,(srcValue,key)=>{cov_i1s2nc9rm().f[1]++;cov_i1s2nc9rm().s[3]++;if(isObject(srcValue)){cov_i1s2nc9rm().b[1][0]++;cov_i1s2nc9rm().s[4]++;(cov_i1s2nc9rm().b[2][0]++,stack)||(cov_i1s2nc9rm().b[2][1]++,stack=new Stack());cov_i1s2nc9rm().s[5]++;baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else{cov_i1s2nc9rm().b[1][1]++;let newValue=(cov_i1s2nc9rm().s[6]++,customizer?(cov_i1s2nc9rm().b[3][0]++,customizer(object[key],srcValue,`${key}`,object,source,stack)):(cov_i1s2nc9rm().b[3][1]++,undefined));cov_i1s2nc9rm().s[7]++;if(newValue===undefined){cov_i1s2nc9rm().b[4][0]++;cov_i1s2nc9rm().s[8]++;newValue=srcValue;}else{cov_i1s2nc9rm().b[4][1]++;}cov_i1s2nc9rm().s[9]++;assignMergeValue(object,key,newValue);}},keysIn);}export default baseMerge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdGFjayIsImFzc2lnbk1lcmdlVmFsdWUiLCJiYXNlRm9yIiwiYmFzZU1lcmdlRGVlcCIsImlzT2JqZWN0Iiwia2V5c0luIiwiYmFzZU1lcmdlIiwib2JqZWN0Iiwic291cmNlIiwic3JjSW5kZXgiLCJjdXN0b21pemVyIiwic3RhY2siLCJzcmNWYWx1ZSIsImtleSIsIm5ld1ZhbHVlIiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsiYmFzZU1lcmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdGFjayBmcm9tICcuL1N0YWNrLmpzJ1xyXG5pbXBvcnQgYXNzaWduTWVyZ2VWYWx1ZSBmcm9tICcuL2Fzc2lnbk1lcmdlVmFsdWUuanMnXHJcbmltcG9ydCBiYXNlRm9yIGZyb20gJy4vYmFzZUZvci5qcydcclxuaW1wb3J0IGJhc2VNZXJnZURlZXAgZnJvbSAnLi9iYXNlTWVyZ2VEZWVwLmpzJ1xyXG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi4vaXNPYmplY3QuanMnXHJcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi4va2V5c0luLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBtZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXHJcbiAqICBjb3VudGVycGFydHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xyXG4gIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIGJhc2VGb3Ioc291cmNlLCAoc3JjVmFsdWUsIGtleSkgPT4ge1xyXG4gICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xyXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spXHJcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbGV0IG5ld1ZhbHVlID0gY3VzdG9taXplclxyXG4gICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc3JjVmFsdWUsIGAke2tleX1gLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXHJcbiAgICAgICAgOiB1bmRlZmluZWRcclxuXHJcbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZVxyXG4gICAgICB9XHJcbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKVxyXG4gICAgfVxyXG4gIH0sIGtleXNJbilcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZU1lcmdlXHJcbiJdLCJtYXBwaW5ncyI6Ijg5RUFlWTtBQUFBLHlGQWZaLE1BQU9BLE1BQUssS0FBTSxZQUFZLENBQzlCLE1BQU9DLGlCQUFnQixLQUFNLHVCQUF1QixDQUNwRCxNQUFPQyxRQUFPLEtBQU0sY0FBYyxDQUNsQyxNQUFPQyxjQUFhLEtBQU0sb0JBQW9CLENBQzlDLE1BQU9DLFNBQVEsS0FBTSxnQkFBZ0IsQ0FDckMsTUFBT0MsT0FBTSxLQUFNLGNBQWMsQ0FFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLFVBQVMsQ0FBQ0MsTUFBTSxDQUFFQyxNQUFNLENBQUVDLFFBQVEsQ0FBRUMsVUFBVSxDQUFFQyxLQUFLLENBQUUsK0NBQzlELEdBQUlKLE1BQU0sR0FBS0MsTUFBTSxDQUFFLGtEQUNyQixPQUNGLENBQUMsdURBQ0ROLE9BQU8sQ0FBQ00sTUFBTSxDQUFFLENBQUNJLFFBQVEsQ0FBRUMsR0FBRyxHQUFLLCtDQUNqQyxHQUFJVCxRQUFRLENBQUNRLFFBQVEsQ0FBQyxDQUFFLGtEQUN0QiwyQkFBQUQsS0FBSyw4QkFBS0EsS0FBSyxDQUFHLEdBQUlYLE1BQUssR0FBQyx3QkFDNUJHLGFBQWEsQ0FBQ0ksTUFBTSxDQUFFQyxNQUFNLENBQUVLLEdBQUcsQ0FBRUosUUFBUSxDQUFFSCxTQUFTLENBQUVJLFVBQVUsQ0FBRUMsS0FBSyxDQUFDLENBQzVFLENBQUMsSUFDSSwyQkFDSCxHQUFJRyxTQUFRLHlCQUFHSixVQUFVLDRCQUNyQkEsVUFBVSxDQUFDSCxNQUFNLENBQUNNLEdBQUcsQ0FBQyxDQUFFRCxRQUFRLENBQUcsR0FBRUMsR0FBSSxFQUFDLENBQUVOLE1BQU0sQ0FBRUMsTUFBTSxDQUFFRyxLQUFLLENBQUMsNkJBQ2xFSSxTQUFTLDBCQUViLEdBQUlELFFBQVEsR0FBS0MsU0FBUyxDQUFFLGtEQUMxQkQsUUFBUSxDQUFHRixRQUFRLENBQ3JCLENBQUMsdURBQ0RYLGdCQUFnQixDQUFDTSxNQUFNLENBQUVNLEdBQUcsQ0FBRUMsUUFBUSxDQUFDLENBQ3pDLENBQ0YsQ0FBQyxDQUFFVCxNQUFNLENBQUMsQ0FDWixDQUVBLGNBQWVDLFVBQVMifQ==