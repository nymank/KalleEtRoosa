function cov_1kwi6vsgst(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseReduce.js";var hash="015e911eac70ce15b8f1c860f67dd6291d381e71";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseReduce.js",statementMap:{"0":{start:{line:15,column:2},end:{line:19,column:4}},"1":{start:{line:16,column:4},end:{line:18,column:55}},"2":{start:{line:20,column:2},end:{line:20,column:20}}},fnMap:{"0":{name:"baseReduce",decl:{start:{line:14,column:9},end:{line:14,column:19}},loc:{start:{line:14,column:76},end:{line:21,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:23},end:{line:15,column:24}},loc:{start:{line:15,column:53},end:{line:19,column:3}},line:15}},branchMap:{"0":{loc:{start:{line:16,column:18},end:{line:18,column:55}},type:"cond-expr",locations:[{start:{line:17,column:9},end:{line:17,column:33}},{start:{line:18,column:8},end:{line:18,column:55}}],line:16}},s:{"0":0,"1":0,"2":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"015e911eac70ce15b8f1c860f67dd6291d381e71"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1kwi6vsgst=function(){return actualCoverage;};}return actualCoverage;}cov_1kwi6vsgst();/**
 * The base implementation of `reduce` and `reduceRight` which iterates
 * over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){cov_1kwi6vsgst().f[0]++;cov_1kwi6vsgst().s[0]++;eachFunc(collection,(value,index,collection)=>{cov_1kwi6vsgst().f[1]++;cov_1kwi6vsgst().s[1]++;accumulator=initAccum?(cov_1kwi6vsgst().b[0][0]++,(initAccum=false,value)):(cov_1kwi6vsgst().b[0][1]++,iteratee(accumulator,value,index,collection));});cov_1kwi6vsgst().s[2]++;return accumulator;}export default baseReduce;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlUmVkdWNlIiwiY29sbGVjdGlvbiIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJpbml0QWNjdW0iLCJlYWNoRnVuYyIsInZhbHVlIiwiaW5kZXgiXSwic291cmNlcyI6WyJiYXNlUmVkdWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgcmVkdWNlYCBhbmQgYHJlZHVjZVJpZ2h0YCB3aGljaCBpdGVyYXRlc1xyXG4gKiBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXHJcbiAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxyXG4gKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cclxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxyXG4gKi9cclxuZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcclxuICBlYWNoRnVuYyhjb2xsZWN0aW9uLCAodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSA9PiB7XHJcbiAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxyXG4gICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXHJcbiAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbilcclxuICB9KVxyXG4gIHJldHVybiBhY2N1bXVsYXRvclxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBiYXNlUmVkdWNlXHJcbiJdLCJtYXBwaW5ncyI6Inl3Q0FlWTtBQUFBLDJGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0EsV0FBVSxDQUFDQyxVQUFVLENBQUVDLFFBQVEsQ0FBRUMsV0FBVyxDQUFFQyxTQUFTLENBQUVDLFFBQVEsQ0FBRSxpREFDMUVBLFFBQVEsQ0FBQ0osVUFBVSxDQUFFLENBQUNLLEtBQUssQ0FBRUMsS0FBSyxDQUFFTixVQUFVLEdBQUssaURBQ2pERSxXQUFXLENBQUdDLFNBQVMsOEJBQ2xCQSxTQUFTLENBQUcsS0FBSyxDQUFFRSxLQUFLLCtCQUN6QkosUUFBUSxDQUFDQyxXQUFXLENBQUVHLEtBQUssQ0FBRUMsS0FBSyxDQUFFTixVQUFVLENBQUMsRUFDckQsQ0FBQyxDQUFDLHlCQUNGLE1BQU9FLFlBQVcsQ0FDcEIsQ0FFQSxjQUFlSCxXQUFVIn0=