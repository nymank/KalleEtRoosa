function cov_1xvh270ihw(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseIndexOf.js";var hash="b5cd12a3181dd9fca7a4aca9bd9c1bed4aeda790";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseIndexOf.js",statementMap:{"0":{start:{line:15,column:2},end:{line:17,column:48}}},fnMap:{"0":{name:"baseIndexOf",decl:{start:{line:14,column:9},end:{line:14,column:20}},loc:{start:{line:14,column:46},end:{line:18,column:1}},line:14}},branchMap:{"0":{loc:{start:{line:15,column:9},end:{line:17,column:48}},type:"cond-expr",locations:[{start:{line:16,column:6},end:{line:16,column:44}},{start:{line:17,column:6},end:{line:17,column:48}}],line:15}},s:{"0":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b5cd12a3181dd9fca7a4aca9bd9c1bed4aeda790"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1xvh270ihw=function(){return actualCoverage;};}return actualCoverage;}cov_1xvh270ihw();import baseFindIndex from'./baseFindIndex.js';import baseIsNaN from'./baseIsNaN.js';import strictIndexOf from'./strictIndexOf.js';/**
 * The base implementation of `indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */function baseIndexOf(array,value,fromIndex){cov_1xvh270ihw().f[0]++;cov_1xvh270ihw().s[0]++;return value===value?(cov_1xvh270ihw().b[0][0]++,strictIndexOf(array,value,fromIndex)):(cov_1xvh270ihw().b[0][1]++,baseFindIndex(array,baseIsNaN,fromIndex));}export default baseIndexOf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlRmluZEluZGV4IiwiYmFzZUlzTmFOIiwic3RyaWN0SW5kZXhPZiIsImJhc2VJbmRleE9mIiwiYXJyYXkiLCJ2YWx1ZSIsImZyb21JbmRleCJdLCJzb3VyY2VzIjpbImJhc2VJbmRleE9mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlRmluZEluZGV4IGZyb20gJy4vYmFzZUZpbmRJbmRleC5qcydcclxuaW1wb3J0IGJhc2VJc05hTiBmcm9tICcuL2Jhc2VJc05hTi5qcydcclxuaW1wb3J0IHN0cmljdEluZGV4T2YgZnJvbSAnLi9zdHJpY3RJbmRleE9mLmpzJ1xyXG5cclxuLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBpbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cclxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cclxuICovXHJcbmZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XHJcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxyXG4gICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxyXG4gICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZUluZGV4T2ZcclxuIl0sIm1hcHBpbmdzIjoieS9CQWVZO0FBQUEsMkZBZlosTUFBT0EsY0FBYSxLQUFNLG9CQUFvQixDQUM5QyxNQUFPQyxVQUFTLEtBQU0sZ0JBQWdCLENBQ3RDLE1BQU9DLGNBQWEsS0FBTSxvQkFBb0IsQ0FFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0MsWUFBVyxDQUFDQyxLQUFLLENBQUVDLEtBQUssQ0FBRUMsU0FBUyxDQUFFLGlEQUM1QyxNQUFPRCxNQUFLLEdBQUtBLEtBQUssNkJBQ2xCSCxhQUFhLENBQUNFLEtBQUssQ0FBRUMsS0FBSyxDQUFFQyxTQUFTLENBQUMsOEJBQ3RDTixhQUFhLENBQUNJLEtBQUssQ0FBRUgsU0FBUyxDQUFFSyxTQUFTLENBQUMsRUFDaEQsQ0FFQSxjQUFlSCxZQUFXIn0=