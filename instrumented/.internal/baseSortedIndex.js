function cov_1mn5k27y9s(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseSortedIndex.js";var hash="57ee0b77e916b8f8a0207181678ded423d3284db";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseSortedIndex.js",statementMap:{"0":{start:{line:5,column:25},end:{line:5,column:35}},"1":{start:{line:6,column:30},end:{line:6,column:52}},"2":{start:{line:21,column:12},end:{line:21,column:13}},"3":{start:{line:22,column:13},end:{line:22,column:47}},"4":{start:{line:24,column:2},end:{line:36,column:3}},"5":{start:{line:25,column:4},end:{line:34,column:5}},"6":{start:{line:26,column:18},end:{line:26,column:36}},"7":{start:{line:27,column:23},end:{line:27,column:33}},"8":{start:{line:28,column:6},end:{line:33,column:7}},"9":{start:{line:30,column:8},end:{line:30,column:21}},"10":{start:{line:32,column:8},end:{line:32,column:18}},"11":{start:{line:35,column:4},end:{line:35,column:15}},"12":{start:{line:37,column:2},end:{line:37,column:70}},"13":{start:{line:37,column:52},end:{line:37,column:57}}},fnMap:{"0":{name:"baseSortedIndex",decl:{start:{line:20,column:9},end:{line:20,column:24}},loc:{start:{line:20,column:51},end:{line:38,column:1}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:41},end:{line:37,column:42}},loc:{start:{line:37,column:52},end:{line:37,column:57}},line:37}},branchMap:{"0":{loc:{start:{line:22,column:13},end:{line:22,column:47}},type:"cond-expr",locations:[{start:{line:22,column:29},end:{line:22,column:32}},{start:{line:22,column:35},end:{line:22,column:47}}],line:22},"1":{loc:{start:{line:24,column:2},end:{line:36,column:3}},type:"if",locations:[{start:{line:24,column:2},end:{line:36,column:3}},{start:{line:24,column:2},end:{line:36,column:3}}],line:24},"2":{loc:{start:{line:24,column:6},end:{line:24,column:83}},type:"binary-expr",locations:[{start:{line:24,column:6},end:{line:24,column:31}},{start:{line:24,column:35},end:{line:24,column:50}},{start:{line:24,column:54},end:{line:24,column:83}}],line:24},"3":{loc:{start:{line:28,column:6},end:{line:33,column:7}},type:"if",locations:[{start:{line:28,column:6},end:{line:33,column:7}},{start:{line:28,column:6},end:{line:33,column:7}}],line:28},"4":{loc:{start:{line:28,column:10},end:{line:29,column:65}},type:"binary-expr",locations:[{start:{line:28,column:10},end:{line:28,column:27}},{start:{line:28,column:31},end:{line:28,column:50}},{start:{line:29,column:11},end:{line:29,column:64}}],line:28},"5":{loc:{start:{line:29,column:11},end:{line:29,column:64}},type:"cond-expr",locations:[{start:{line:29,column:25},end:{line:29,column:42}},{start:{line:29,column:47},end:{line:29,column:63}}],line:29}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"57ee0b77e916b8f8a0207181678ded423d3284db"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1mn5k27y9s=function(){return actualCoverage;};}return actualCoverage;}cov_1mn5k27y9s();import baseSortedIndexBy from'./baseSortedIndexBy.js';import isSymbol from'../isSymbol.js';/** Used as references for the maximum length and index of an array. */const MAX_ARRAY_LENGTH=(cov_1mn5k27y9s().s[0]++,4294967295);const HALF_MAX_ARRAY_LENGTH=(cov_1mn5k27y9s().s[1]++,MAX_ARRAY_LENGTH>>>1);/**
 * The base implementation of `sortedIndex` and `sortedLastIndex` which
 * performs a binary search of `array` to determine the index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */function baseSortedIndex(array,value,retHighest){cov_1mn5k27y9s().f[0]++;let low=(cov_1mn5k27y9s().s[2]++,0);let high=(cov_1mn5k27y9s().s[3]++,array==null?(cov_1mn5k27y9s().b[0][0]++,low):(cov_1mn5k27y9s().b[0][1]++,array.length));cov_1mn5k27y9s().s[4]++;if((cov_1mn5k27y9s().b[2][0]++,typeof value==='number')&&(cov_1mn5k27y9s().b[2][1]++,value===value)&&(cov_1mn5k27y9s().b[2][2]++,high<=HALF_MAX_ARRAY_LENGTH)){cov_1mn5k27y9s().b[1][0]++;cov_1mn5k27y9s().s[5]++;while(low<high){const mid=(cov_1mn5k27y9s().s[6]++,low+high>>>1);const computed=(cov_1mn5k27y9s().s[7]++,array[mid]);cov_1mn5k27y9s().s[8]++;if((cov_1mn5k27y9s().b[4][0]++,computed!==null)&&(cov_1mn5k27y9s().b[4][1]++,!isSymbol(computed))&&(cov_1mn5k27y9s().b[4][2]++,retHighest?(cov_1mn5k27y9s().b[5][0]++,computed<=value):(cov_1mn5k27y9s().b[5][1]++,computed<value))){cov_1mn5k27y9s().b[3][0]++;cov_1mn5k27y9s().s[9]++;low=mid+1;}else{cov_1mn5k27y9s().b[3][1]++;cov_1mn5k27y9s().s[10]++;high=mid;}}cov_1mn5k27y9s().s[11]++;return high;}else{cov_1mn5k27y9s().b[1][1]++;}cov_1mn5k27y9s().s[12]++;return baseSortedIndexBy(array,value,value=>{cov_1mn5k27y9s().f[1]++;cov_1mn5k27y9s().s[13]++;return value;},retHighest);}export default baseSortedIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlU29ydGVkSW5kZXhCeSIsImlzU3ltYm9sIiwiTUFYX0FSUkFZX0xFTkdUSCIsIkhBTEZfTUFYX0FSUkFZX0xFTkdUSCIsImJhc2VTb3J0ZWRJbmRleCIsImFycmF5IiwidmFsdWUiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsImxlbmd0aCIsIm1pZCIsImNvbXB1dGVkIl0sInNvdXJjZXMiOlsiYmFzZVNvcnRlZEluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlU29ydGVkSW5kZXhCeSBmcm9tICcuL2Jhc2VTb3J0ZWRJbmRleEJ5LmpzJ1xyXG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi4vaXNTeW1ib2wuanMnXHJcblxyXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xyXG5jb25zdCBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NVxyXG5jb25zdCBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxXHJcblxyXG4vKipcclxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNvcnRlZEluZGV4YCBhbmQgYHNvcnRlZExhc3RJbmRleGAgd2hpY2hcclxuICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXHJcbiAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cclxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cclxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcclxuICogIGludG8gYGFycmF5YC5cclxuICovXHJcbmZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcclxuICBsZXQgbG93ID0gMFxyXG4gIGxldCBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aFxyXG5cclxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcclxuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XHJcbiAgICAgIGNvbnN0IG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMVxyXG4gICAgICBjb25zdCBjb21wdXRlZCA9IGFycmF5W21pZF1cclxuICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcclxuICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcclxuICAgICAgICBsb3cgPSBtaWQgKyAxXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaGlnaCA9IG1pZFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGlnaFxyXG4gIH1cclxuICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCAodmFsdWUpID0+IHZhbHVlLCByZXRIaWdoZXN0KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBiYXNlU29ydGVkSW5kZXhcclxuIl0sIm1hcHBpbmdzIjoiZ2tHQWVZO0FBQUEsMkZBZlosTUFBT0Esa0JBQWlCLEtBQU0sd0JBQXdCLENBQ3RELE1BQU9DLFNBQVEsS0FBTSxnQkFBZ0IsQ0FFckMsdUVBQ0EsS0FBTUMsaUJBQWdCLDBCQUFHLFVBQVUsRUFDbkMsS0FBTUMsc0JBQXFCLDBCQUFHRCxnQkFBZ0IsR0FBSyxDQUFDLEVBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNFLGdCQUFlLENBQUNDLEtBQUssQ0FBRUMsS0FBSyxDQUFFQyxVQUFVLENBQUUseUJBQ2pELEdBQUlDLElBQUcsMEJBQUcsQ0FBQyxFQUNYLEdBQUlDLEtBQUksMEJBQUdKLEtBQUssRUFBSSxJQUFJLDZCQUFHRyxHQUFHLDhCQUFHSCxLQUFLLENBQUNLLE1BQU0sMkJBRTdDLEdBQUksa0NBQU9KLE1BQUssR0FBSyxRQUFRLCtCQUFJQSxLQUFLLEdBQUtBLEtBQUssK0JBQUlHLElBQUksRUFBSU4scUJBQXFCLEVBQUUsb0RBQ2pGLE1BQU9LLEdBQUcsQ0FBR0MsSUFBSSxDQUFFLENBQ2pCLEtBQU1FLElBQUcsMEJBQUlILEdBQUcsQ0FBR0MsSUFBSSxHQUFNLENBQUMsRUFDOUIsS0FBTUcsU0FBUSwwQkFBR1AsS0FBSyxDQUFDTSxHQUFHLENBQUMsMEJBQzNCLEdBQUksNEJBQUFDLFFBQVEsR0FBSyxJQUFJLCtCQUFJLENBQUNYLFFBQVEsQ0FBQ1csUUFBUSxDQUFDLCtCQUN2Q0wsVUFBVSw2QkFBSUssUUFBUSxFQUFJTixLQUFLLDhCQUFLTSxRQUFRLENBQUdOLEtBQUssQ0FBQyxDQUFDLENBQUUsb0RBQzNERSxHQUFHLENBQUdHLEdBQUcsQ0FBRyxDQUFDLENBQ2YsQ0FBQyxJQUFNLHFEQUNMRixJQUFJLENBQUdFLEdBQUcsQ0FDWixDQUNGLENBQUMseUJBQ0QsTUFBT0YsS0FBSSxDQUNiLENBQUMsMERBQ0QsTUFBT1Qsa0JBQWlCLENBQUNLLEtBQUssQ0FBRUMsS0FBSyxDQUFHQSxLQUFLLEVBQUtBLDhEQUFLLENBQUQsQ0FBQyxDQUFFQyxVQUFVLENBQUMsQ0FDdEUsQ0FFQSxjQUFlSCxnQkFBZSJ9