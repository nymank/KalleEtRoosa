function cov_2bsw8g6dm9(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseFlatten.js";var hash="facc6190cc092b63bf1a74358edcec41742a3a66";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseFlatten.js",statementMap:{"0":{start:{line:15,column:2},end:{line:15,column:42}},"1":{start:{line:16,column:2},end:{line:16,column:25}},"2":{start:{line:18,column:2},end:{line:20,column:3}},"3":{start:{line:19,column:4},end:{line:19,column:17}},"4":{start:{line:22,column:2},end:{line:33,column:3}},"5":{start:{line:23,column:4},end:{line:32,column:5}},"6":{start:{line:24,column:6},end:{line:29,column:7}},"7":{start:{line:26,column:8},end:{line:26,column:66}},"8":{start:{line:28,column:8},end:{line:28,column:29}},"9":{start:{line:30,column:11},end:{line:32,column:5}},"10":{start:{line:31,column:6},end:{line:31,column:35}},"11":{start:{line:34,column:2},end:{line:34,column:15}}},fnMap:{"0":{name:"baseFlatten",decl:{start:{line:14,column:9},end:{line:14,column:20}},loc:{start:{line:14,column:64},end:{line:35,column:1}},line:14}},branchMap:{"0":{loc:{start:{line:15,column:2},end:{line:15,column:42}},type:"binary-expr",locations:[{start:{line:15,column:2},end:{line:15,column:11}},{start:{line:15,column:16},end:{line:15,column:41}}],line:15},"1":{loc:{start:{line:16,column:2},end:{line:16,column:25}},type:"binary-expr",locations:[{start:{line:16,column:2},end:{line:16,column:8}},{start:{line:16,column:13},end:{line:16,column:24}}],line:16},"2":{loc:{start:{line:18,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:18,column:2},end:{line:20,column:3}},{start:{line:18,column:2},end:{line:20,column:3}}],line:18},"3":{loc:{start:{line:23,column:4},end:{line:32,column:5}},type:"if",locations:[{start:{line:23,column:4},end:{line:32,column:5}},{start:{line:23,column:4},end:{line:32,column:5}}],line:23},"4":{loc:{start:{line:23,column:8},end:{line:23,column:37}},type:"binary-expr",locations:[{start:{line:23,column:8},end:{line:23,column:17}},{start:{line:23,column:21},end:{line:23,column:37}}],line:23},"5":{loc:{start:{line:24,column:6},end:{line:29,column:7}},type:"if",locations:[{start:{line:24,column:6},end:{line:29,column:7}},{start:{line:24,column:6},end:{line:29,column:7}}],line:24},"6":{loc:{start:{line:30,column:11},end:{line:32,column:5}},type:"if",locations:[{start:{line:30,column:11},end:{line:32,column:5}},{start:{line:30,column:11},end:{line:32,column:5}}],line:30}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"facc6190cc092b63bf1a74358edcec41742a3a66"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2bsw8g6dm9=function(){return actualCoverage;};}return actualCoverage;}cov_2bsw8g6dm9();import isFlattenable from'./isFlattenable.js';/**
 * The base implementation of `flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */function baseFlatten(array,depth,predicate,isStrict,result){cov_2bsw8g6dm9().f[0]++;cov_2bsw8g6dm9().s[0]++;(cov_2bsw8g6dm9().b[0][0]++,predicate)||(cov_2bsw8g6dm9().b[0][1]++,predicate=isFlattenable);cov_2bsw8g6dm9().s[1]++;(cov_2bsw8g6dm9().b[1][0]++,result)||(cov_2bsw8g6dm9().b[1][1]++,result=[]);cov_2bsw8g6dm9().s[2]++;if(array==null){cov_2bsw8g6dm9().b[2][0]++;cov_2bsw8g6dm9().s[3]++;return result;}else{cov_2bsw8g6dm9().b[2][1]++;}cov_2bsw8g6dm9().s[4]++;for(const value of array){cov_2bsw8g6dm9().s[5]++;if((cov_2bsw8g6dm9().b[4][0]++,depth>0)&&(cov_2bsw8g6dm9().b[4][1]++,predicate(value))){cov_2bsw8g6dm9().b[3][0]++;cov_2bsw8g6dm9().s[6]++;if(depth>1){cov_2bsw8g6dm9().b[5][0]++;cov_2bsw8g6dm9().s[7]++;// Recursively flatten arrays (susceptible to call stack limits).
baseFlatten(value,depth-1,predicate,isStrict,result);}else{cov_2bsw8g6dm9().b[5][1]++;cov_2bsw8g6dm9().s[8]++;result.push(...value);}}else{cov_2bsw8g6dm9().b[3][1]++;cov_2bsw8g6dm9().s[9]++;if(!isStrict){cov_2bsw8g6dm9().b[6][0]++;cov_2bsw8g6dm9().s[10]++;result[result.length]=value;}else{cov_2bsw8g6dm9().b[6][1]++;}}}cov_2bsw8g6dm9().s[11]++;return result;}export default baseFlatten;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZsYXR0ZW4iLCJhcnJheSIsImRlcHRoIiwicHJlZGljYXRlIiwiaXNTdHJpY3QiLCJyZXN1bHQiLCJ2YWx1ZSIsInB1c2giLCJsZW5ndGgiXSwic291cmNlcyI6WyJiYXNlRmxhdHRlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXNGbGF0dGVuYWJsZSBmcm9tICcuL2lzRmxhdHRlbmFibGUuanMnXHJcblxyXG4vKipcclxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cclxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxyXG4gKi9cclxuZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcclxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpXHJcbiAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSlcclxuXHJcbiAgaWYgKGFycmF5ID09IG51bGwpIHtcclxuICAgIHJldHVybiByZXN1bHRcclxuICB9XHJcblxyXG4gIGZvciAoY29uc3QgdmFsdWUgb2YgYXJyYXkpIHtcclxuICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xyXG4gICAgICBpZiAoZGVwdGggPiAxKSB7XHJcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cclxuICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goLi4udmFsdWUpXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XHJcbiAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZUZsYXR0ZW5cclxuIl0sIm1hcHBpbmdzIjoidTJGQWVZO0FBQUEsMkZBZlosTUFBT0EsY0FBYSxLQUFNLG9CQUFvQixDQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0MsWUFBVyxDQUFDQyxLQUFLLENBQUVDLEtBQUssQ0FBRUMsU0FBUyxDQUFFQyxRQUFRLENBQUVDLE1BQU0sQ0FBRSxpREFDOUQsNEJBQUFGLFNBQVMsK0JBQUtBLFNBQVMsQ0FBR0osYUFBYSxDQUFDLHlCQUN4Qyw0QkFBQU0sTUFBTSwrQkFBS0EsTUFBTSxDQUFHLEVBQUUsQ0FBQyx5QkFFdkIsR0FBSUosS0FBSyxFQUFJLElBQUksQ0FBRSxvREFDakIsTUFBT0ksT0FBTSxDQUNmLENBQUMseURBRUQsSUFBSyxLQUFNQyxNQUFLLEdBQUlMLE1BQUssQ0FBRSx5QkFDekIsR0FBSSw0QkFBQUMsS0FBSyxDQUFHLENBQUMsK0JBQUlDLFNBQVMsQ0FBQ0csS0FBSyxDQUFDLEVBQUUsb0RBQ2pDLEdBQUlKLEtBQUssQ0FBRyxDQUFDLENBQUUsb0RBQ2I7QUFDQUYsV0FBVyxDQUFDTSxLQUFLLENBQUVKLEtBQUssQ0FBRyxDQUFDLENBQUVDLFNBQVMsQ0FBRUMsUUFBUSxDQUFFQyxNQUFNLENBQUMsQ0FDNUQsQ0FBQyxJQUFNLG9EQUNMQSxNQUFNLENBQUNFLElBQUksQ0FBQyxHQUFHRCxLQUFLLENBQUMsQ0FDdkIsQ0FDRixDQUFDLElBQU0sdURBQUksQ0FBQ0YsUUFBUSxDQUFFLHFEQUNwQkMsTUFBTSxDQUFDQSxNQUFNLENBQUNHLE1BQU0sQ0FBQyxDQUFHRixLQUFLLENBQy9CLENBQUMsaUNBQUQsQ0FDRixDQUFDLHlCQUNELE1BQU9ELE9BQU0sQ0FDZixDQUVBLGNBQWVMLFlBQVcifQ==