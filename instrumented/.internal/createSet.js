function cov_1ffud0plmg(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\createSet.js";var hash="6424e53f5bcfea21260189cb8fedb75640102e34";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\createSet.js",statementMap:{"0":{start:{line:4,column:17},end:{line:4,column:22}},"1":{start:{line:13,column:18},end:{line:15,column:12}},"2":{start:{line:14,column:16},end:{line:14,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:16},end:{line:14,column:31}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:10},end:{line:15,column:12}},line:15}},branchMap:{"0":{loc:{start:{line:13,column:18},end:{line:15,column:12}},type:"cond-expr",locations:[{start:{line:14,column:4},end:{line:14,column:31}},{start:{line:15,column:4},end:{line:15,column:12}}],line:13},"1":{loc:{start:{line:13,column:19},end:{line:13,column:73}},type:"binary-expr",locations:[{start:{line:13,column:19},end:{line:13,column:22}},{start:{line:13,column:26},end:{line:13,column:73}}],line:13}},s:{"0":0,"1":0,"2":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6424e53f5bcfea21260189cb8fedb75640102e34"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ffud0plmg=function(){return actualCoverage;};}return actualCoverage;}cov_1ffud0plmg();import setToArray from'./setToArray.js';/** Used as references for various `Number` constants. */const INFINITY=(cov_1ffud0plmg().s[0]++,1/0);/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */const createSet=(cov_1ffud0plmg().s[1]++,(cov_1ffud0plmg().b[1][0]++,Set)&&(cov_1ffud0plmg().b[1][1]++,1/setToArray(new Set([,-0]))[1]==INFINITY)?(cov_1ffud0plmg().b[0][0]++,values=>{cov_1ffud0plmg().f[0]++;cov_1ffud0plmg().s[2]++;return new Set(values);}):(cov_1ffud0plmg().b[0][1]++,()=>{cov_1ffud0plmg().f[1]++;}));export default createSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZXRUb0FycmF5IiwiSU5GSU5JVFkiLCJjcmVhdGVTZXQiLCJTZXQiLCJ2YWx1ZXMiXSwic291cmNlcyI6WyJjcmVhdGVTZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNldFRvQXJyYXkgZnJvbSAnLi9zZXRUb0FycmF5LmpzJ1xyXG5cclxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXHJcbmNvbnN0IElORklOSVRZID0gMSAvIDBcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXHJcbiAqL1xyXG5jb25zdCBjcmVhdGVTZXQgPSAoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKVxyXG4gID8gKHZhbHVlcykgPT4gbmV3IFNldCh2YWx1ZXMpXHJcbiAgOiAoKSA9PiB7fVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2V0XHJcbiJdLCJtYXBwaW5ncyI6ImsrQ0FlWTtBQUFBLDJGQWZaLE1BQU9BLFdBQVUsS0FBTSxpQkFBaUIsQ0FFeEMseURBQ0EsS0FBTUMsU0FBUSwwQkFBRyxDQUFDLENBQUcsQ0FBQyxFQUV0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLEtBQU1DLFVBQVMsMEJBQUksNEJBQUFDLEdBQUcsK0JBQUssQ0FBQyxDQUFHSCxVQUFVLENBQUMsR0FBSUcsSUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUtGLFFBQVEsOEJBQ3BFRyxNQUFNLEVBQUssMkRBQUlELElBQUcsQ0FBQ0MsTUFBTSxDQUFDLENBQUQsQ0FBQyw4QkFDM0IsSUFBTSx5QkFBQyxDQUFDLEdBRVosY0FBZUYsVUFBUyJ9