function cov_2kugx01a6(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\cloneRegExp.js";var hash="5d7a8ec6ba69a157e8d491d079a080eef20ad812";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\cloneRegExp.js",statementMap:{"0":{start:{line:2,column:16},end:{line:2,column:22}},"1":{start:{line:12,column:17},end:{line:12,column:76}},"2":{start:{line:13,column:2},end:{line:13,column:37}},"3":{start:{line:14,column:2},end:{line:14,column:15}}},fnMap:{"0":{name:"cloneRegExp",decl:{start:{line:11,column:9},end:{line:11,column:20}},loc:{start:{line:11,column:29},end:{line:15,column:1}},line:11}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5d7a8ec6ba69a157e8d491d079a080eef20ad812"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2kugx01a6=function(){return actualCoverage;};}return actualCoverage;}cov_2kugx01a6();/** Used to match `RegExp` flags from their coerced string values. */const reFlags=(cov_2kugx01a6().s[0]++,/\w*$/);/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */function cloneRegExp(regexp){cov_2kugx01a6().f[0]++;const result=(cov_2kugx01a6().s[1]++,new regexp.constructor(regexp.source,reFlags.exec(regexp)));cov_2kugx01a6().s[2]++;result.lastIndex=regexp.lastIndex;cov_2kugx01a6().s[3]++;return result;}export default cloneRegExp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZUZsYWdzIiwiY2xvbmVSZWdFeHAiLCJyZWdleHAiLCJyZXN1bHQiLCJjb25zdHJ1Y3RvciIsInNvdXJjZSIsImV4ZWMiLCJsYXN0SW5kZXgiXSwic291cmNlcyI6WyJjbG9uZVJlZ0V4cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cclxuY29uc3QgcmVGbGFncyA9IC9cXHcqJC9cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cclxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cclxuICovXHJcbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xyXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpXHJcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXhcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsb25lUmVnRXhwXHJcbiJdLCJtYXBwaW5ncyI6Iis5QkFlWTtBQUFBLHlGQWZaLHFFQUNBLEtBQU1BLFFBQU8seUJBQUcsTUFBTSxFQUV0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLFlBQVcsQ0FBQ0MsTUFBTSxDQUFFLHdCQUMzQixLQUFNQyxPQUFNLHlCQUFHLEdBQUlELE9BQU0sQ0FBQ0UsV0FBVyxDQUFDRixNQUFNLENBQUNHLE1BQU0sQ0FBRUwsT0FBTyxDQUFDTSxJQUFJLENBQUNKLE1BQU0sQ0FBQyxDQUFDLHlCQUMxRUMsTUFBTSxDQUFDSSxTQUFTLENBQUdMLE1BQU0sQ0FBQ0ssU0FBUyx3QkFDbkMsTUFBT0osT0FBTSxDQUNmLENBRUEsY0FBZUYsWUFBVyJ9