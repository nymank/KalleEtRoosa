function cov_ksrmx54kk(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\cloneTypedArray.js";var hash="0d9d464eeca6b6df93f6e5eb4ffec279fd579838";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\cloneTypedArray.js",statementMap:{"0":{start:{line:12,column:17},end:{line:12,column:81}},"1":{start:{line:13,column:2},end:{line:13,column:85}}},fnMap:{"0":{name:"cloneTypedArray",decl:{start:{line:11,column:9},end:{line:11,column:24}},loc:{start:{line:11,column:45},end:{line:14,column:1}},line:11}},branchMap:{"0":{loc:{start:{line:12,column:17},end:{line:12,column:81}},type:"cond-expr",locations:[{start:{line:12,column:26},end:{line:12,column:61}},{start:{line:12,column:64},end:{line:12,column:81}}],line:12}},s:{"0":0,"1":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0d9d464eeca6b6df93f6e5eb4ffec279fd579838"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ksrmx54kk=function(){return actualCoverage;};}return actualCoverage;}cov_ksrmx54kk();import cloneArrayBuffer from'./cloneArrayBuffer.js';/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */function cloneTypedArray(typedArray,isDeep){cov_ksrmx54kk().f[0]++;const buffer=(cov_ksrmx54kk().s[0]++,isDeep?(cov_ksrmx54kk().b[0][0]++,cloneArrayBuffer(typedArray.buffer)):(cov_ksrmx54kk().b[0][1]++,typedArray.buffer));cov_ksrmx54kk().s[1]++;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}export default cloneTypedArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjbG9uZUFycmF5QnVmZmVyIiwiY2xvbmVUeXBlZEFycmF5IiwidHlwZWRBcnJheSIsImlzRGVlcCIsImJ1ZmZlciIsImNvbnN0cnVjdG9yIiwiYnl0ZU9mZnNldCIsImxlbmd0aCJdLCJzb3VyY2VzIjpbImNsb25lVHlwZWRBcnJheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL2Nsb25lQXJyYXlCdWZmZXIuanMnXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXHJcbiAqL1xyXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XHJcbiAgY29uc3QgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlclxyXG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsb25lVHlwZWRBcnJheVxyXG4iXSwibWFwcGluZ3MiOiJxa0NBZVk7QUFBQSx5RkFmWixNQUFPQSxpQkFBZ0IsS0FBTSx1QkFBdUIsQ0FFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLGdCQUFlLENBQUNDLFVBQVUsQ0FBRUMsTUFBTSxDQUFFLHdCQUMzQyxLQUFNQyxPQUFNLHlCQUFHRCxNQUFNLDRCQUFHSCxnQkFBZ0IsQ0FBQ0UsVUFBVSxDQUFDRSxNQUFNLENBQUMsNkJBQUdGLFVBQVUsQ0FBQ0UsTUFBTSwwQkFDL0UsTUFBTyxJQUFJRixXQUFVLENBQUNHLFdBQVcsQ0FBQ0QsTUFBTSxDQUFFRixVQUFVLENBQUNJLFVBQVUsQ0FBRUosVUFBVSxDQUFDSyxNQUFNLENBQUMsQ0FDckYsQ0FFQSxjQUFlTixnQkFBZSJ9