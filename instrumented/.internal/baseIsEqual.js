function cov_2o101tznbf(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseIsEqual.js";var hash="f7c54106b598bb4719f6a00f5527d4064b72afcf";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseIsEqual.js",statementMap:{"0":{start:{line:19,column:2},end:{line:21,column:3}},"1":{start:{line:20,column:4},end:{line:20,column:15}},"2":{start:{line:22,column:2},end:{line:24,column:3}},"3":{start:{line:23,column:4},end:{line:23,column:45}},"4":{start:{line:25,column:2},end:{line:25,column:79}}},fnMap:{"0":{name:"baseIsEqual",decl:{start:{line:18,column:9},end:{line:18,column:20}},loc:{start:{line:18,column:63},end:{line:26,column:1}},line:18}},branchMap:{"0":{loc:{start:{line:19,column:2},end:{line:21,column:3}},type:"if",locations:[{start:{line:19,column:2},end:{line:21,column:3}},{start:{line:19,column:2},end:{line:21,column:3}}],line:19},"1":{loc:{start:{line:22,column:2},end:{line:24,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:24,column:3}},{start:{line:22,column:2},end:{line:24,column:3}}],line:22},"2":{loc:{start:{line:22,column:6},end:{line:22,column:86}},type:"binary-expr",locations:[{start:{line:22,column:6},end:{line:22,column:19}},{start:{line:22,column:23},end:{line:22,column:36}},{start:{line:22,column:41},end:{line:22,column:61}},{start:{line:22,column:65},end:{line:22,column:85}}],line:22},"3":{loc:{start:{line:23,column:11},end:{line:23,column:45}},type:"binary-expr",locations:[{start:{line:23,column:11},end:{line:23,column:26}},{start:{line:23,column:30},end:{line:23,column:45}}],line:23}},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0,0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f7c54106b598bb4719f6a00f5527d4064b72afcf"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2o101tznbf=function(){return actualCoverage;};}return actualCoverage;}cov_2o101tznbf();import baseIsEqualDeep from'./baseIsEqualDeep.js';import isObjectLike from'../isObjectLike.js';/**
 * The base implementation of `isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */function baseIsEqual(value,other,bitmask,customizer,stack){cov_2o101tznbf().f[0]++;cov_2o101tznbf().s[0]++;if(value===other){cov_2o101tznbf().b[0][0]++;cov_2o101tznbf().s[1]++;return true;}else{cov_2o101tznbf().b[0][1]++;}cov_2o101tznbf().s[2]++;if((cov_2o101tznbf().b[2][0]++,value==null)||(cov_2o101tznbf().b[2][1]++,other==null)||(cov_2o101tznbf().b[2][2]++,!isObjectLike(value))&&(cov_2o101tznbf().b[2][3]++,!isObjectLike(other))){cov_2o101tznbf().b[1][0]++;cov_2o101tznbf().s[3]++;return(cov_2o101tznbf().b[3][0]++,value!==value)&&(cov_2o101tznbf().b[3][1]++,other!==other);}else{cov_2o101tznbf().b[1][1]++;}cov_2o101tznbf().s[4]++;return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}export default baseIsEqual;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlSXNFcXVhbERlZXAiLCJpc09iamVjdExpa2UiLCJiYXNlSXNFcXVhbCIsInZhbHVlIiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIl0sInNvdXJjZXMiOlsiYmFzZUlzRXF1YWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJhc2VJc0VxdWFsRGVlcCBmcm9tICcuL2Jhc2VJc0VxdWFsRGVlcC5qcydcclxuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuLi9pc09iamVjdExpa2UuanMnXHJcblxyXG4vKipcclxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcclxuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cclxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cclxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxyXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXHJcbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cclxuICovXHJcbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcclxuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyXHJcbiAgfVxyXG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0VxdWFsXHJcbiJdLCJtYXBwaW5ncyI6Imk4REFlWTtBQUFBLDJGQWZaLE1BQU9BLGdCQUFlLEtBQU0sc0JBQXNCLENBQ2xELE1BQU9DLGFBQVksS0FBTSxvQkFBb0IsQ0FFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVNDLFlBQVcsQ0FBQ0MsS0FBSyxDQUFFQyxLQUFLLENBQUVDLE9BQU8sQ0FBRUMsVUFBVSxDQUFFQyxLQUFLLENBQUUsaURBQzdELEdBQUlKLEtBQUssR0FBS0MsS0FBSyxDQUFFLG9EQUNuQixNQUFPLEtBQUksQ0FDYixDQUFDLHlEQUNELEdBQUksNEJBQUFELEtBQUssRUFBSSxJQUFJLCtCQUFJQyxLQUFLLEVBQUksSUFBSSxHQUFLLDZCQUFDSCxZQUFZLENBQUNFLEtBQUssQ0FBQywrQkFBSSxDQUFDRixZQUFZLENBQUNHLEtBQUssQ0FBQyxDQUFDLENBQUUsb0RBQ3BGLE1BQU8sNEJBQUFELEtBQUssR0FBS0EsS0FBSywrQkFBSUMsS0FBSyxHQUFLQSxLQUFLLEVBQzNDLENBQUMseURBQ0QsTUFBT0osZ0JBQWUsQ0FBQ0csS0FBSyxDQUFFQyxLQUFLLENBQUVDLE9BQU8sQ0FBRUMsVUFBVSxDQUFFSixXQUFXLENBQUVLLEtBQUssQ0FBQyxDQUMvRSxDQUVBLGNBQWVMLFlBQVcifQ==