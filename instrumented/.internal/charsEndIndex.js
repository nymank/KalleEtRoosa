function cov_1g8h12v7bl(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\charsEndIndex.js";var hash="9bd4a1df22da55f581db041168e608649bf8e03c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\charsEndIndex.js",statementMap:{"0":{start:{line:13,column:14},end:{line:13,column:31}},"1":{start:{line:15,column:2},end:{line:15,column:74}},"2":{start:{line:16,column:2},end:{line:16,column:14}}},fnMap:{"0":{name:"charsEndIndex",decl:{start:{line:12,column:9},end:{line:12,column:22}},loc:{start:{line:12,column:47},end:{line:17,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:15,column:9},end:{line:15,column:70}},type:"binary-expr",locations:[{start:{line:15,column:9},end:{line:15,column:16}},{start:{line:15,column:20},end:{line:15,column:70}}],line:15}},s:{"0":0,"1":0,"2":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9bd4a1df22da55f581db041168e608649bf8e03c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1g8h12v7bl=function(){return actualCoverage;};}return actualCoverage;}cov_1g8h12v7bl();import baseIndexOf from'./baseIndexOf.js';/**
 * Used by `trim` and `trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */function charsEndIndex(strSymbols,chrSymbols){cov_1g8h12v7bl().f[0]++;let index=(cov_1g8h12v7bl().s[0]++,strSymbols.length);cov_1g8h12v7bl().s[1]++;while((cov_1g8h12v7bl().b[0][0]++,index--)&&(cov_1g8h12v7bl().b[0][1]++,baseIndexOf(chrSymbols,strSymbols[index],0)>-1)){}cov_1g8h12v7bl().s[2]++;return index;}export default charsEndIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlSW5kZXhPZiIsImNoYXJzRW5kSW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImluZGV4IiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiY2hhcnNFbmRJbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZUluZGV4T2YgZnJvbSAnLi9iYXNlSW5kZXhPZi5qcydcclxuXHJcbi8qKlxyXG4gKiBVc2VkIGJ5IGB0cmltYCBhbmQgYHRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxyXG4gKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxyXG4gKi9cclxuZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XHJcbiAgbGV0IGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGhcclxuXHJcbiAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XHJcbiAgcmV0dXJuIGluZGV4XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNoYXJzRW5kSW5kZXhcclxuIl0sIm1hcHBpbmdzIjoiNm5DQWVZO0FBQUEsMkZBZlosTUFBT0EsWUFBVyxLQUFNLGtCQUFrQixDQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQyxjQUFhLENBQUNDLFVBQVUsQ0FBRUMsVUFBVSxDQUFFLHlCQUM3QyxHQUFJQyxNQUFLLDBCQUFHRixVQUFVLENBQUNHLE1BQU0sMEJBRTdCLE1BQU8sNEJBQUFELEtBQUssRUFBRSwrQkFBSUosV0FBVyxDQUFDRyxVQUFVLENBQUVELFVBQVUsQ0FBQ0UsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHdCQUN4RSxNQUFPQSxNQUFLLENBQ2QsQ0FFQSxjQUFlSCxjQUFhIn0=