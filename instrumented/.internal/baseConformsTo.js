function cov_5oru1ia5n(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseConformsTo.js";var hash="18d9b6b0a2b1353d1238049ecc852b89b6c4024e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseConformsTo.js",statementMap:{"0":{start:{line:10,column:15},end:{line:10,column:27}},"1":{start:{line:11,column:2},end:{line:13,column:3}},"2":{start:{line:12,column:4},end:{line:12,column:18}},"3":{start:{line:14,column:2},end:{line:14,column:25}},"4":{start:{line:15,column:2},end:{line:23,column:3}},"5":{start:{line:16,column:16},end:{line:16,column:29}},"6":{start:{line:17,column:22},end:{line:17,column:33}},"7":{start:{line:18,column:18},end:{line:18,column:29}},"8":{start:{line:20,column:4},end:{line:22,column:5}},"9":{start:{line:21,column:6},end:{line:21,column:18}},"10":{start:{line:24,column:2},end:{line:24,column:13}}},fnMap:{"0":{name:"baseConformsTo",decl:{start:{line:9,column:9},end:{line:9,column:23}},loc:{start:{line:9,column:47},end:{line:25,column:1}},line:9}},branchMap:{"0":{loc:{start:{line:11,column:2},end:{line:13,column:3}},type:"if",locations:[{start:{line:11,column:2},end:{line:13,column:3}},{start:{line:11,column:2},end:{line:13,column:3}}],line:11},"1":{loc:{start:{line:20,column:4},end:{line:22,column:5}},type:"if",locations:[{start:{line:20,column:4},end:{line:22,column:5}},{start:{line:20,column:4},end:{line:22,column:5}}],line:20},"2":{loc:{start:{line:20,column:8},end:{line:20,column:70}},type:"binary-expr",locations:[{start:{line:20,column:9},end:{line:20,column:28}},{start:{line:20,column:32},end:{line:20,column:48}},{start:{line:20,column:53},end:{line:20,column:70}}],line:20}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"18d9b6b0a2b1353d1238049ecc852b89b6c4024e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_5oru1ia5n=function(){return actualCoverage;};}return actualCoverage;}cov_5oru1ia5n();/**
 * The base implementation of `conformsTo` which accepts `props` to check.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property predicates to conform to.
 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
 */function baseConformsTo(object,source,props){cov_5oru1ia5n().f[0]++;let length=(cov_5oru1ia5n().s[0]++,props.length);cov_5oru1ia5n().s[1]++;if(object==null){cov_5oru1ia5n().b[0][0]++;cov_5oru1ia5n().s[2]++;return!length;}else{cov_5oru1ia5n().b[0][1]++;}cov_5oru1ia5n().s[3]++;object=Object(object);cov_5oru1ia5n().s[4]++;while(length--){const key=(cov_5oru1ia5n().s[5]++,props[length]);const predicate=(cov_5oru1ia5n().s[6]++,source[key]);const value=(cov_5oru1ia5n().s[7]++,object[key]);cov_5oru1ia5n().s[8]++;if((cov_5oru1ia5n().b[2][0]++,value===undefined)&&(cov_5oru1ia5n().b[2][1]++,!(key in object))||(cov_5oru1ia5n().b[2][2]++,!predicate(value))){cov_5oru1ia5n().b[1][0]++;cov_5oru1ia5n().s[9]++;return false;}else{cov_5oru1ia5n().b[1][1]++;}}cov_5oru1ia5n().s[10]++;return true;}export default baseConformsTo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlQ29uZm9ybXNUbyIsIm9iamVjdCIsInNvdXJjZSIsInByb3BzIiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5IiwicHJlZGljYXRlIiwidmFsdWUiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyJiYXNlQ29uZm9ybXNUby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxyXG4gKi9cclxuZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XHJcbiAgbGV0IGxlbmd0aCA9IHByb3BzLmxlbmd0aFxyXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xyXG4gICAgcmV0dXJuICFsZW5ndGhcclxuICB9XHJcbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdClcclxuICB3aGlsZSAobGVuZ3RoLS0pIHtcclxuICAgIGNvbnN0IGtleSA9IHByb3BzW2xlbmd0aF1cclxuICAgIGNvbnN0IHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldXHJcbiAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldXHJcblxyXG4gICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdHJ1ZVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBiYXNlQ29uZm9ybXNUb1xyXG4iXSwibWFwcGluZ3MiOiIyaUVBZVk7QUFBQSx5RkFmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0EsZUFBYyxDQUFDQyxNQUFNLENBQUVDLE1BQU0sQ0FBRUMsS0FBSyxDQUFFLHdCQUM3QyxHQUFJQyxPQUFNLHlCQUFHRCxLQUFLLENBQUNDLE1BQU0seUJBQ3pCLEdBQUlILE1BQU0sRUFBSSxJQUFJLENBQUUsa0RBQ2xCLE1BQU8sQ0FBQ0csTUFBTSxDQUNoQixDQUFDLHVEQUNESCxNQUFNLENBQUdJLE1BQU0sQ0FBQ0osTUFBTSxDQUFDLHdCQUN2QixNQUFPRyxNQUFNLEVBQUUsQ0FBRSxDQUNmLEtBQU1FLElBQUcseUJBQUdILEtBQUssQ0FBQ0MsTUFBTSxDQUFDLEVBQ3pCLEtBQU1HLFVBQVMseUJBQUdMLE1BQU0sQ0FBQ0ksR0FBRyxDQUFDLEVBQzdCLEtBQU1FLE1BQUsseUJBQUdQLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLHlCQUV6QixHQUFLLDJCQUFBRSxLQUFLLEdBQUtDLFNBQVMsOEJBQUksRUFBRUgsR0FBRyxHQUFJTCxPQUFNLENBQUMsOEJBQUssQ0FBQ00sU0FBUyxDQUFDQyxLQUFLLENBQUMsRUFBRSxrREFDbEUsTUFBTyxNQUFLLENBQ2QsQ0FBQyxnQ0FDSCxDQUFDLHdCQUNELE1BQU8sS0FBSSxDQUNiLENBRUEsY0FBZVIsZUFBYyJ9