function cov_pvujhd1fk(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseRange.js";var hash="17d4eaa0ce7acc894585b8a7a4605e26062aa79d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseRange.js",statementMap:{"0":{start:{line:13,column:14},end:{line:13,column:16}},"1":{start:{line:14,column:15},end:{line:14,column:66}},"2":{start:{line:15,column:17},end:{line:15,column:34}},"3":{start:{line:17,column:2},end:{line:20,column:3}},"4":{start:{line:18,column:4},end:{line:18,column:48}},"5":{start:{line:19,column:4},end:{line:19,column:17}},"6":{start:{line:21,column:2},end:{line:21,column:15}}},fnMap:{"0":{name:"baseRange",decl:{start:{line:12,column:9},end:{line:12,column:18}},loc:{start:{line:12,column:48},end:{line:22,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:14,column:51},end:{line:14,column:60}},type:"binary-expr",locations:[{start:{line:14,column:51},end:{line:14,column:55}},{start:{line:14,column:59},end:{line:14,column:60}}],line:14},"1":{loc:{start:{line:18,column:11},end:{line:18,column:39}},type:"cond-expr",locations:[{start:{line:18,column:23},end:{line:18,column:29}},{start:{line:18,column:32},end:{line:18,column:39}}],line:18}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"17d4eaa0ce7acc894585b8a7a4605e26062aa79d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_pvujhd1fk=function(){return actualCoverage;};}return actualCoverage;}cov_pvujhd1fk();/**
 * The base implementation of `range` and `rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */function baseRange(start,end,step,fromRight){cov_pvujhd1fk().f[0]++;let index=(cov_pvujhd1fk().s[0]++,-1);let length=(cov_pvujhd1fk().s[1]++,Math.max(Math.ceil((end-start)/((cov_pvujhd1fk().b[0][0]++,step)||(cov_pvujhd1fk().b[0][1]++,1))),0));const result=(cov_pvujhd1fk().s[2]++,new Array(length));cov_pvujhd1fk().s[3]++;while(length--){cov_pvujhd1fk().s[4]++;result[fromRight?(cov_pvujhd1fk().b[1][0]++,length):(cov_pvujhd1fk().b[1][1]++,++index)]=start;cov_pvujhd1fk().s[5]++;start+=step;}cov_pvujhd1fk().s[6]++;return result;}export default baseRange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlUmFuZ2UiLCJzdGFydCIsImVuZCIsInN0ZXAiLCJmcm9tUmlnaHQiLCJpbmRleCIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJjZWlsIiwicmVzdWx0IiwiQXJyYXkiXSwic291cmNlcyI6WyJiYXNlUmFuZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGByYW5nZWAgYW5kIGByYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XHJcbiAqIGNvZXJjZSBhcmd1bWVudHMuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cclxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cclxuICovXHJcbmZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcclxuICBsZXQgaW5kZXggPSAtMVxyXG4gIGxldCBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMClcclxuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKVxyXG5cclxuICB3aGlsZSAobGVuZ3RoLS0pIHtcclxuICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0XHJcbiAgICBzdGFydCArPSBzdGVwXHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZVJhbmdlXHJcbiJdLCJtYXBwaW5ncyI6IjRqREFlWTtBQUFBLHlGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQSxVQUFTLENBQUNDLEtBQUssQ0FBRUMsR0FBRyxDQUFFQyxJQUFJLENBQUVDLFNBQVMsQ0FBRSx3QkFDOUMsR0FBSUMsTUFBSyx5QkFBRyxDQUFDLENBQUMsRUFDZCxHQUFJQyxPQUFNLHlCQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQ1AsR0FBRyxDQUFHRCxLQUFLLEdBQUssMkJBQUFFLElBQUksOEJBQUksQ0FBQyxFQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsRUFDaEUsS0FBTU8sT0FBTSx5QkFBRyxHQUFJQyxNQUFLLENBQUNMLE1BQU0sQ0FBQyx5QkFFaEMsTUFBT0EsTUFBTSxFQUFFLENBQUUsd0JBQ2ZJLE1BQU0sQ0FBQ04sU0FBUyw0QkFBR0UsTUFBTSw2QkFBRyxFQUFFRCxLQUFLLEVBQUMsQ0FBR0osS0FBSyx3QkFDNUNBLEtBQUssRUFBSUUsSUFBSSxDQUNmLENBQUMsdUJBQ0QsTUFBT08sT0FBTSxDQUNmLENBRUEsY0FBZVYsVUFBUyJ9