function cov_iwfyv6f24(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\setToPairs.js";var hash="955ae189a53e7a2baa17c7175f879bed0f1ed7b3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\setToPairs.js",statementMap:{"0":{start:{line:9,column:14},end:{line:9,column:16}},"1":{start:{line:10,column:17},end:{line:10,column:36}},"2":{start:{line:12,column:2},end:{line:14,column:4}},"3":{start:{line:13,column:4},end:{line:13,column:36}},"4":{start:{line:15,column:2},end:{line:15,column:15}}},fnMap:{"0":{name:"setToPairs",decl:{start:{line:8,column:9},end:{line:8,column:19}},loc:{start:{line:8,column:25},end:{line:16,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:14},end:{line:12,column:15}},loc:{start:{line:12,column:25},end:{line:14,column:3}},line:12}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"955ae189a53e7a2baa17c7175f879bed0f1ed7b3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_iwfyv6f24=function(){return actualCoverage;};}return actualCoverage;}cov_iwfyv6f24();/**
 * Converts `set` to its value-value pairs.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the value-value pairs.
 */function setToPairs(set){cov_iwfyv6f24().f[0]++;let index=(cov_iwfyv6f24().s[0]++,-1);const result=(cov_iwfyv6f24().s[1]++,new Array(set.size));cov_iwfyv6f24().s[2]++;set.forEach(value=>{cov_iwfyv6f24().f[1]++;cov_iwfyv6f24().s[3]++;result[++index]=[value,value];});cov_iwfyv6f24().s[4]++;return result;}export default setToPairs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZXRUb1BhaXJzIiwic2V0IiwiaW5kZXgiLCJyZXN1bHQiLCJBcnJheSIsInNpemUiLCJmb3JFYWNoIiwidmFsdWUiXSwic291cmNlcyI6WyJzZXRUb1BhaXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcclxuICBsZXQgaW5kZXggPSAtMVxyXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShzZXQuc2l6ZSlcclxuXHJcbiAgc2V0LmZvckVhY2goKHZhbHVlKSA9PiB7XHJcbiAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXVxyXG4gIH0pXHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzZXRUb1BhaXJzXHJcbiJdLCJtYXBwaW5ncyI6IjZxQ0FlWTtBQUFBLHlGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0EsV0FBVSxDQUFDQyxHQUFHLENBQUUsd0JBQ3ZCLEdBQUlDLE1BQUsseUJBQUcsQ0FBQyxDQUFDLEVBQ2QsS0FBTUMsT0FBTSx5QkFBRyxHQUFJQyxNQUFLLENBQUNILEdBQUcsQ0FBQ0ksSUFBSSxDQUFDLHlCQUVsQ0osR0FBRyxDQUFDSyxPQUFPLENBQUVDLEtBQUssRUFBSywrQ0FDckJKLE1BQU0sQ0FBQyxFQUFFRCxLQUFLLENBQUMsQ0FBRyxDQUFDSyxLQUFLLENBQUVBLEtBQUssQ0FBQyxDQUNsQyxDQUFDLENBQUMsd0JBQ0YsTUFBT0osT0FBTSxDQUNmLENBRUEsY0FBZUgsV0FBVSJ9