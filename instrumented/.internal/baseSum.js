function cov_1p9hztdefn(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\baseSum.js";var hash="1297056679ba47c1bfae23c9b8cc9337b8bda32e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\baseSum.js",statementMap:{"0":{start:{line:12,column:2},end:{line:17,column:3}},"1":{start:{line:13,column:20},end:{line:13,column:35}},"2":{start:{line:14,column:4},end:{line:16,column:5}},"3":{start:{line:15,column:6},end:{line:15,column:66}},"4":{start:{line:18,column:2},end:{line:18,column:15}}},fnMap:{"0":{name:"baseSum",decl:{start:{line:9,column:9},end:{line:9,column:16}},loc:{start:{line:9,column:34},end:{line:19,column:1}},line:9}},branchMap:{"0":{loc:{start:{line:14,column:4},end:{line:16,column:5}},type:"if",locations:[{start:{line:14,column:4},end:{line:16,column:5}},{start:{line:14,column:4},end:{line:16,column:5}}],line:14},"1":{loc:{start:{line:15,column:15},end:{line:15,column:66}},type:"cond-expr",locations:[{start:{line:15,column:38},end:{line:15,column:45}},{start:{line:15,column:49},end:{line:15,column:65}}],line:15}},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1297056679ba47c1bfae23c9b8cc9337b8bda32e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1p9hztdefn=function(){return actualCoverage;};}return actualCoverage;}cov_1p9hztdefn();/**
 * The base implementation of `sum` and `sumBy`.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the sum.
 */function baseSum(array,iteratee){cov_1p9hztdefn().f[0]++;let result;cov_1p9hztdefn().s[0]++;for(const value of array){const current=(cov_1p9hztdefn().s[1]++,iteratee(value));cov_1p9hztdefn().s[2]++;if(current!==undefined){cov_1p9hztdefn().b[0][0]++;cov_1p9hztdefn().s[3]++;result=result===undefined?(cov_1p9hztdefn().b[1][0]++,current):(cov_1p9hztdefn().b[1][1]++,result+current);}else{cov_1p9hztdefn().b[0][1]++;}}cov_1p9hztdefn().s[4]++;return result;}export default baseSum;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlU3VtIiwiYXJyYXkiLCJpdGVyYXRlZSIsInJlc3VsdCIsInZhbHVlIiwiY3VycmVudCIsInVuZGVmaW5lZCJdLCJzb3VyY2VzIjpbImJhc2VTdW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzdW1gIGFuZCBgc3VtQnlgLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xyXG4gIGxldCByZXN1bHRcclxuXHJcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiBhcnJheSkge1xyXG4gICAgY29uc3QgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKVxyXG4gICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudClcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBiYXNlU3VtXHJcbiJdLCJtYXBwaW5ncyI6InU2Q0FlWTtBQUFBLDJGQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQSxRQUFPLENBQUNDLEtBQUssQ0FBRUMsUUFBUSxDQUFFLHlCQUNoQyxHQUFJQyxPQUFNLHlCQUVWLElBQUssS0FBTUMsTUFBSyxHQUFJSCxNQUFLLENBQUUsQ0FDekIsS0FBTUksUUFBTywwQkFBR0gsUUFBUSxDQUFDRSxLQUFLLENBQUMsMEJBQy9CLEdBQUlDLE9BQU8sR0FBS0MsU0FBUyxDQUFFLG9EQUN6QkgsTUFBTSxDQUFHQSxNQUFNLEdBQUtHLFNBQVMsNkJBQUdELE9BQU8sOEJBQUlGLE1BQU0sQ0FBR0UsT0FBTyxDQUFDLENBQzlELENBQUMsaUNBQ0gsQ0FBQyx3QkFDRCxNQUFPRixPQUFNLENBQ2YsQ0FFQSxjQUFlSCxRQUFPIn0=