function cov_2ljl0mqb8b(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\basePickBy.js";var hash="b5157408979c940a8eeffa048e8e1a1d665f993c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\basePickBy.js",statementMap:{"0":{start:{line:15,column:14},end:{line:15,column:16}},"1":{start:{line:16,column:17},end:{line:16,column:29}},"2":{start:{line:17,column:17},end:{line:17,column:19}},"3":{start:{line:19,column:2},end:{line:25,column:3}},"4":{start:{line:20,column:17},end:{line:20,column:29}},"5":{start:{line:21,column:18},end:{line:21,column:39}},"6":{start:{line:22,column:4},end:{line:24,column:5}},"7":{start:{line:23,column:6},end:{line:23,column:52}},"8":{start:{line:26,column:2},end:{line:26,column:15}}},fnMap:{"0":{name:"basePickBy",decl:{start:{line:14,column:9},end:{line:14,column:19}},loc:{start:{line:14,column:46},end:{line:27,column:1}},line:14}},branchMap:{"0":{loc:{start:{line:22,column:4},end:{line:24,column:5}},type:"if",locations:[{start:{line:22,column:4},end:{line:24,column:5}},{start:{line:22,column:4},end:{line:24,column:5}}],line:22}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b5157408979c940a8eeffa048e8e1a1d665f993c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2ljl0mqb8b=function(){return actualCoverage;};}return actualCoverage;}cov_2ljl0mqb8b();import baseGet from'./baseGet.js';import baseSet from'./baseSet.js';import castPath from'./castPath.js';/**
 * The base implementation of `pickBy`.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */function basePickBy(object,paths,predicate){cov_2ljl0mqb8b().f[0]++;let index=(cov_2ljl0mqb8b().s[0]++,-1);const length=(cov_2ljl0mqb8b().s[1]++,paths.length);const result=(cov_2ljl0mqb8b().s[2]++,{});cov_2ljl0mqb8b().s[3]++;while(++index<length){const path=(cov_2ljl0mqb8b().s[4]++,paths[index]);const value=(cov_2ljl0mqb8b().s[5]++,baseGet(object,path));cov_2ljl0mqb8b().s[6]++;if(predicate(value,path)){cov_2ljl0mqb8b().b[0][0]++;cov_2ljl0mqb8b().s[7]++;baseSet(result,castPath(path,object),value);}else{cov_2ljl0mqb8b().b[0][1]++;}}cov_2ljl0mqb8b().s[8]++;return result;}export default basePickBy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlR2V0IiwiYmFzZVNldCIsImNhc3RQYXRoIiwiYmFzZVBpY2tCeSIsIm9iamVjdCIsInBhdGhzIiwicHJlZGljYXRlIiwiaW5kZXgiLCJsZW5ndGgiLCJyZXN1bHQiLCJwYXRoIiwidmFsdWUiXSwic291cmNlcyI6WyJiYXNlUGlja0J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlR2V0IGZyb20gJy4vYmFzZUdldC5qcydcclxuaW1wb3J0IGJhc2VTZXQgZnJvbSAnLi9iYXNlU2V0LmpzJ1xyXG5pbXBvcnQgY2FzdFBhdGggZnJvbSAnLi9jYXN0UGF0aC5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgcGlja0J5YC5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cclxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xyXG4gIGxldCBpbmRleCA9IC0xXHJcbiAgY29uc3QgbGVuZ3RoID0gcGF0aHMubGVuZ3RoXHJcbiAgY29uc3QgcmVzdWx0ID0ge31cclxuXHJcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcclxuICAgIGNvbnN0IHBhdGggPSBwYXRoc1tpbmRleF1cclxuICAgIGNvbnN0IHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpXHJcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xyXG4gICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYmFzZVBpY2tCeVxyXG4iXSwibWFwcGluZ3MiOiJ1OUNBZVk7QUFBQSwyRkFmWixNQUFPQSxRQUFPLEtBQU0sY0FBYyxDQUNsQyxNQUFPQyxRQUFPLEtBQU0sY0FBYyxDQUNsQyxNQUFPQyxTQUFRLEtBQU0sZUFBZSxDQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTQyxXQUFVLENBQUNDLE1BQU0sQ0FBRUMsS0FBSyxDQUFFQyxTQUFTLENBQUUseUJBQzVDLEdBQUlDLE1BQUssMEJBQUcsQ0FBQyxDQUFDLEVBQ2QsS0FBTUMsT0FBTSwwQkFBR0gsS0FBSyxDQUFDRyxNQUFNLEVBQzNCLEtBQU1DLE9BQU0sMEJBQUcsQ0FBQyxDQUFDLDBCQUVqQixNQUFPLEVBQUVGLEtBQUssQ0FBR0MsTUFBTSxDQUFFLENBQ3ZCLEtBQU1FLEtBQUksMEJBQUdMLEtBQUssQ0FBQ0UsS0FBSyxDQUFDLEVBQ3pCLEtBQU1JLE1BQUssMEJBQUdYLE9BQU8sQ0FBQ0ksTUFBTSxDQUFFTSxJQUFJLENBQUMsMEJBQ25DLEdBQUlKLFNBQVMsQ0FBQ0ssS0FBSyxDQUFFRCxJQUFJLENBQUMsQ0FBRSxvREFDMUJULE9BQU8sQ0FBQ1EsTUFBTSxDQUFFUCxRQUFRLENBQUNRLElBQUksQ0FBRU4sTUFBTSxDQUFDLENBQUVPLEtBQUssQ0FBQyxDQUNoRCxDQUFDLGlDQUNILENBQUMsd0JBQ0QsTUFBT0YsT0FBTSxDQUNmLENBRUEsY0FBZU4sV0FBVSJ9