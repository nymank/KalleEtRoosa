function cov_2b9d89aap8(){var path="C:\\git\\KalleEtRoosa\\src\\.internal\\cloneDataView.js";var hash="a1e53cd8e62bdf5ba6c480df057ea35f596575ab";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\git\\KalleEtRoosa\\src\\.internal\\cloneDataView.js",statementMap:{"0":{start:{line:12,column:17},end:{line:12,column:77}},"1":{start:{line:13,column:2},end:{line:13,column:83}}},fnMap:{"0":{name:"cloneDataView",decl:{start:{line:11,column:9},end:{line:11,column:22}},loc:{start:{line:11,column:41},end:{line:14,column:1}},line:11}},branchMap:{"0":{loc:{start:{line:12,column:17},end:{line:12,column:77}},type:"cond-expr",locations:[{start:{line:12,column:26},end:{line:12,column:59}},{start:{line:12,column:62},end:{line:12,column:77}}],line:12}},s:{"0":0,"1":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a1e53cd8e62bdf5ba6c480df057ea35f596575ab"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2b9d89aap8=function(){return actualCoverage;};}return actualCoverage;}cov_2b9d89aap8();import cloneArrayBuffer from'./cloneArrayBuffer.js';/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */function cloneDataView(dataView,isDeep){cov_2b9d89aap8().f[0]++;const buffer=(cov_2b9d89aap8().s[0]++,isDeep?(cov_2b9d89aap8().b[0][0]++,cloneArrayBuffer(dataView.buffer)):(cov_2b9d89aap8().b[0][1]++,dataView.buffer));cov_2b9d89aap8().s[1]++;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}export default cloneDataView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjbG9uZUFycmF5QnVmZmVyIiwiY2xvbmVEYXRhVmlldyIsImRhdGFWaWV3IiwiaXNEZWVwIiwiYnVmZmVyIiwiY29uc3RydWN0b3IiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VzIjpbImNsb25lRGF0YVZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9jbG9uZUFycmF5QnVmZmVyLmpzJ1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cclxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cclxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cclxuICovXHJcbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xyXG4gIGNvbnN0IGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlclxyXG4gIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbG9uZURhdGFWaWV3XHJcbiJdLCJtYXBwaW5ncyI6ImdrQ0FlWTtBQUFBLDJGQWZaLE1BQU9BLGlCQUFnQixLQUFNLHVCQUF1QixDQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBU0MsY0FBYSxDQUFDQyxRQUFRLENBQUVDLE1BQU0sQ0FBRSx5QkFDdkMsS0FBTUMsT0FBTSwwQkFBR0QsTUFBTSw2QkFBR0gsZ0JBQWdCLENBQUNFLFFBQVEsQ0FBQ0UsTUFBTSxDQUFDLDhCQUFHRixRQUFRLENBQUNFLE1BQU0sMkJBQzNFLE1BQU8sSUFBSUYsU0FBUSxDQUFDRyxXQUFXLENBQUNELE1BQU0sQ0FBRUYsUUFBUSxDQUFDSSxVQUFVLENBQUVKLFFBQVEsQ0FBQ0ssVUFBVSxDQUFDLENBQ25GLENBRUEsY0FBZU4sY0FBYSJ9